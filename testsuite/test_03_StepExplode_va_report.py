import os
import re
from typing import Tuple, Union

import pytest
import sys
import numpy as np
import pandas as pd

# adding py_script directory to the system path of python script

sys.path.insert(0, os.path.join(os.path.abspath(os.path.dirname(__file__)), '../python_script'))
from step_definition.step_data import StepData
from step_impl.step_expand_row import StepExpandRow
import lib.utility_lib as Util

INPUT_PARAMETERS = "testsuite/input_parameters.yml"

@pytest.fixture(scope="module", autouse=True)
def global_var():
    # Load Global Var(s)
    pytest.va_report_enhanced_table = Util.get_df_from_spreadsheet_file(
        os.path.join('testsuite/testData',
                     'All-images-final_report_proj-cENM-va_clean.csv'))
    pytest.va_report_enhanced_table.reset_index(drop=True)

    dict_from_config_file = Util.config_file_to_dictionary(INPUT_PARAMETERS, 'config')
    pytest.data_path = dict_from_config_file['output_path']


def verify_explode_tool_consistency(va_scan_tab):
    va_scan_support_tab = va_scan_tab.copy()

    # ***
    # trigger function to test
    step_info = StepData(va_scan_tab, pd.DataFrame())

    step_executor = StepExpandRow(step_info)
    step_executor.run_step()
    va_scan_table_cp, original_va_scan_tab = step_executor.get_curr_prev_va_report_df()


    # *****
    # Jump Prediction
    #
    va_scan_support_tab['FoundTrivy'] = va_scan_support_tab['FoundAnchore'] = va_scan_support_tab['FoundXray'] = ''
    va_scan_support_tab.loc[va_scan_support_tab['Found in trivy'] != 'no', 'FoundTrivy'] = '*'
    va_scan_support_tab.loc[va_scan_support_tab['Found in anchore_grype'] != 'no', 'FoundAnchoreGrype'] = '*'
    va_scan_support_tab.loc[va_scan_support_tab['Found in xray'] != 'no', 'FoundXray'] = '*'
    va_scan_support_tab['FoundIn'] = va_scan_support_tab['FoundTrivy'].map(str) + \
                                     va_scan_support_tab['FoundAnchoreGrype'].map(str) + \
                                     va_scan_support_tab['FoundXray'].map(str)

    df_counter_separators = pd.DataFrame(columns=['PackagePaths#|List', 'RpmPackage#|List', 'RpmPackage#',
                                                  'PackagePaths#', 'RpmPackage|', 'PackagePaths|',
                                                  'FoundIn', 'Consistency'])

    df_counter_separators['PackagePaths#|List'] = \
        va_scan_support_tab['Package Paths'].str.replace(r'[^\|#]', '', regex=True)
    df_counter_separators['RpmPackage#|List'] = \
        va_scan_support_tab['Rpm Package'].str.replace(r'[^\|#]', '', regex=True)
    df_counter_separators['PackagePaths#'] = va_scan_support_tab['Package Paths'].str.count(r'\#')
    df_counter_separators['RpmPackage#'] = va_scan_support_tab['Rpm Package'].str.count(r'\#')
    df_counter_separators['PackagePaths|'] = va_scan_support_tab['Package Paths'].str.count(r'\|')
    df_counter_separators['RpmPackage|'] = va_scan_support_tab['Rpm Package'].str.count(r'\|')
    df_counter_separators['PackagePathsS'] = va_scan_support_tab['Package Paths'].str.count(r'\s+')
    df_counter_separators['RpmPackageS'] = va_scan_support_tab['Rpm Package'].str.count(r'\s+')
    df_counter_separators['FoundIn'] = va_scan_support_tab['FoundIn'].str.count(r'\*')

    df_counter_separators['Consistency'] = np.where(
        (df_counter_separators['FoundIn'] == df_counter_separators['RpmPackage#']+1) &
        (df_counter_separators['PackagePaths#'] == df_counter_separators['RpmPackage#']) &
        (df_counter_separators['PackagePaths|'] == df_counter_separators['RpmPackage|']) &
        (df_counter_separators['PackagePaths#|List'] == df_counter_separators['RpmPackage#|List']) &
        (df_counter_separators['PackagePathsS'] == 0), 'True', 'False')

    df_consistent_rows = df_counter_separators[df_counter_separators['Consistency'] == 'True']
    # hypothesis of row number in explode and discarded table: Characters '|', '#' and
    # space imply a duplication of rows.
    hypothesis_exploded_rows = df_consistent_rows['PackagePaths#'].sum() + \
                               df_consistent_rows['PackagePaths|'].sum() + \
                               df_consistent_rows['RpmPackageS'].sum() + \
                               df_consistent_rows.shape[0]

    # hypothesis of row number in discarded table:
    hypothesis_malformed_rows = df_counter_separators[df_counter_separators['Consistency'] == 'False'].shape[0]

    if hypothesis_exploded_rows != len(va_scan_table_cp) :
        print("hypothesis_exploded_rows - expanded: {}".format(hypothesis_exploded_rows))
        print("va_scan_table_cp.shape[0] - actual: {}".format(va_scan_table_cp.shape[0]))
        print("hypothesis_malformed_rows - expanded: {}".format(hypothesis_malformed_rows))
        df_counter_separators.to_csv(pytest.data_path + "/test_Explode_Va_Report_counter_separators.csv")
        print(Util.colour_text(Util.MyColours.RED, "ERROR: Test Case failed"))
        return False

    return True


def test_manipulate_rpm_packpath_with_model_table():
    print(Util.colour_text(Util.MyColours.BLUE,
                           "*************************************************************************************\n"))
    sample_vals = {
        'Package Paths':          ['a',  'a#b#c', 'p1#p2|p3|p4#p5',           'q1#q2|q3|q4#q5'],
        'Rpm Package':            ['b e', 'g#h#i', 'None#None|None|None#None', 'q1#q2|q3|q4#q5'],
        'Found in trivy':         ['v1', 'v1',    'v4',                       'v5'],
        'Found in anchore_grype': ['no', 'v2',    'v4',                       'v5'],
        'Found in xray':          ['no', 'v3',    'v4',                       'v5']
    }
    va_scan_support_tab = pd.DataFrame(sample_vals)
    assert verify_explode_tool_consistency(va_scan_support_tab), \
        "test_manipulate_rpm_packpath_with_model_table: test failed"


def test_manipulate_rpm_packpath_with_va_report(global_var):
    print(Util.colour_text(Util.MyColours.BLUE,
                           "*************************************************************************************\n"))
    print("TestCase9: \n test to check manipulate_rpm_packpath function "
          "in order to explode va_repo_enhanced row with condition. \n")
    assert verify_explode_tool_consistency(pytest.va_report_enhanced_table), \
        "test_manipulate_rpm_packpath_with_va_report: test failed"
    print("test_manipulate_rpm_packpath_with_va_report: Test Case ended successfully")
