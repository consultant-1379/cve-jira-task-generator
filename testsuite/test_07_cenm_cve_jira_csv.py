"""
Test to verify the number of the column, with the relative column name, on the
'cENM-cve-jira-csv_*.csv' report file.
"""
import os
import sys
import shutil
import pytest
# adding lib directory to the system path of python script
sys.path.insert(
    0,
    os.path.join(os.path.abspath(os.path.dirname(__file__)),
                 '../python_script'))
import lib.utility_lib as Util
import csv_for_jira_generator as generator

# Configuration file
INPUT_PARAMETERS = "testsuite/input_parameters.yml"
CONFIG_PROPERTY_FILE = './config_properties.yml'
JIRA_PROPERTIES_SECTION = "csv_generator_properties"
ER_PROPERTIES_SECTION = "vulnerability_properties"


@pytest.fixture
def global_var():
    """
    Global var configuration
    """
    pytest.va_report_df = Util.get_df_from_spreadsheet_file(
        os.path.join('testsuite/testData', 'cENM-va-report-for-jira.csv'))

    # Read configuration file
    pytest.jira_data_dictionary = Util.config_file_to_dictionary(
        CONFIG_PROPERTY_FILE, JIRA_PROPERTIES_SECTION)
    pytest.er_data_dictionary = Util.config_file_to_dictionary(
        CONFIG_PROPERTY_FILE, ER_PROPERTIES_SECTION)

    dict_from_config_file = Util.config_file_to_dictionary(INPUT_PARAMETERS, 'config')
    pytest.data_path = dict_from_config_file['output_path']
    shutil.rmtree(pytest.data_path, ignore_errors=True)
    os.mkdir(pytest.data_path)


def test_check_cve_jira_csv_columns(global_var):
    """
    Test the presence of the columns, with the expected name, on the .csv file
    """
    print(
        "*****************************************************************\n")
    print(
        Util.colour_text(
            Util.MyColours.BLUE,
            "TestCase10: \n  check that the columns of cENM_cve_jira_cvs "
            "report are present as expected\n"))

    va_df = generator.create_jira_ticket_df(pytest.va_report_df,
                                            pytest.jira_data_dictionary,
                                            pytest.er_data_dictionary)

    actual_columns = list(va_df.columns)

    expected_columns = [
        'Issue Type', 'Summary', 'Priority', 'Reporter', 'Description',
        'Team name', 'RA', 'Component/s', 'Acceptance Criteria',
        'Found in release', 'Epic Link', 'Product Name',
        'Product Number', 'Severity', 'Tool', 'Identifier',
        'Vulnerability description'
    ]

    if sorted(actual_columns) == sorted(expected_columns):
        print(
            Util.colour_text(
                Util.MyColours.BLUE,
                "test_check_cve_jira_csv_columns: test ended successfully"))
    else:
        print(
            Util.colour_text(
                Util.MyColours.RED,
                "ERROR: Test Case failed. \n test_check_cve_jira_csv_columns "
                "- Unexpected Columns in Header:"))
        print(
            Util.colour_text(Util.MyColours.YELLOW,
                             f"\nExpected: {expected_columns}"))
        print(
            Util.colour_text(Util.MyColours.YELLOW,
                             f"\n  Actual: {actual_columns}"))
        assert False, "test_check_cve_jira_csv_columns: test failed"
