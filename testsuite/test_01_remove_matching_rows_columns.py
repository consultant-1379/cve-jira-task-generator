import os
import shutil
import sys
import pytest
import pandas as pd

# adding lib directory to the system path of python script
sys.path.insert(0, os.path.join(os.path.abspath(os.path.dirname(__file__)), '../python_script/lib'))
import utility_lib as Util

# Input file
INPUT_PARAMETERS = "testsuite/input_parameters.yml"
CONFIG_PROPERTY_FILE = 'config_properties.yml'
JIRA_PROPERTIES_SECTION = "csv_generator_properties"


@pytest.fixture(scope="module", autouse=True)
def global_var():
    va_repo_table = Util.get_df_from_spreadsheet_file(os.path.join('testsuite/testData', 'cENM-va-report-for-jira.csv'))
    va_repo_table = va_repo_table.reset_index(drop=True)
    pytest.va_repo_n_table = va_repo_table.copy()
    pytest.va_repo_n_1_table = va_repo_table.copy()

    pytest.base_image_table = Util.get_df_from_spreadsheet_file(os.path.join('testsuite/testData',
                                                                             'empty_base_image.csv'))
    pytest.va_report_enhanced_table = Util.get_df_from_spreadsheet_file(
        os.path.join('testsuite/testData', 'cENM-va-report-for-jira_clean.csv'))

    pytest.base_image_table.reset_index(drop=True)
    pytest.va_report_enhanced_table.reset_index(drop=True)

    dict_from_config_file = Util.config_file_to_dictionary(INPUT_PARAMETERS, 'config')
    pytest.data_path = dict_from_config_file['output_path']


def get_query(filter_row, filter_to_apply, selected_row):
    # EXAMPLE of query to build
    # _query_ = '`CVE-REF` == @cve_ref_value and `Package Name` == @pack_name_value'
    if len(filter_to_apply) == len(filter_row):
        query_tokens = []
        for item in range(len(filter_to_apply)):
            query_tokens.append(
                '`{col}` == "{value}"'.format(col=filter_to_apply[item], value=selected_row[filter_row[item]]))
        built_query = " and ".join(tuple(query_tokens))
        return built_query

    print(Util.colour_text(Util.MyColours.RED, "ERROR! provided filters dow not have same length"))
    return ""


@Util.strict_types
def is_row_present_in_df(table: pd.DataFrame, selected_row: pd.Series, filter_row: list, filter_to_apply: list) -> bool:
    """
    Args:
        table: df on which to perform a key search
        selected_row: row from which to extract keys
        filter_row: selected_row key names
        filter_to_apply: table key names

    Returns:

    """

    if table is None or table.empty:
        return False

    # WARNING filter_to_apply and filter_row, if different,  as to be ordered by correspondent columns
    query = get_query(filter_row, filter_to_apply, selected_row)
    if query is not None:
        result = table.query(query)  # Returns DataFrame or None
        if result is None or result.empty:
            return False
        return True

    print(Util.colour_text(Util.MyColours.RED, "ERROR! Impossible to build a valid query string"))
    return False


# This function checks whether the df(s) passed as arguments satisfy the following condition for any row in df(s)
#  -------------------------
#  | left | right | result |
#  -------------------------
#  | P     | NP    | P     |
#  | P     | P     | NP    |
#  | NP    | P     | NP    |
#  | EMPTY | P     | EMPTY |
#  | EMPTY | EMPTY | EMPTY |
#  | P     | EMPTY | P     |
# P = present; NP= not present; Empty = the df is without rows.
@Util.strict_types
def check_consistency(left_df: pd.DataFrame, right_df: pd.DataFrame, result_df: pd.DataFrame, filter_left: list,
                      filter_right: list) -> bool:
    for idx_n in range(0, len(left_df)):
        print("check_consistency - left-df {}% \r".format(int((idx_n / len(left_df)) * 100)), end="", file=sys.stdout)
        row = left_df.iloc[idx_n]
        if not is_row_present_in_df(right_df, row, filter_left, filter_right) and is_row_present_in_df(result_df, row,
                                                                                                       filter_left,
                                                                                                       filter_left):
            pass
        elif is_row_present_in_df(right_df, row, filter_left, filter_right) and not is_row_present_in_df(result_df, row,
                                                                                                         filter_left,
                                                                                                         filter_left):
            pass
        elif right_df.empty and is_row_present_in_df(result_df, row, filter_left):
            pass
        else:
            print("check_consistency : ERROR - unexpected match for row in left_df identified by the following keys\n")
            print(row)
            return False

    for idx in range(0, len(right_df)):
        print("check_consistency - right-df {}% \r".format(int((idx / len(right_df)) * 100)), end="")
        row = right_df.iloc[idx]
        if not is_row_present_in_df(left_df, row, filter_right, filter_left) and \
                not is_row_present_in_df(result_df, row, filter_right, filter_left):
            pass
        elif is_row_present_in_df(left_df, row, filter_right, filter_left) and \
                not is_row_present_in_df(result_df, row, filter_right, filter_left):
            pass
        elif left_df.empty and result_df.empty:
            pass
        else:
            print("check_consistency : ERROR - unexpected match for row in right_df identified by the following keys\n")
            print(row)
            return False

    for idx in range(0, len(result_df)):
        print("check_consistency - result-df {}% \r".format(int((idx / len(result_df)) * 100)), end="")
        row = result_df.iloc[idx]
        if is_row_present_in_df(left_df, row, filter_left, filter_left) and \
                not is_row_present_in_df(right_df, row, filter_left, filter_right):
            pass
        elif is_row_present_in_df(left_df, row, filter_left, filter_left) and right_df.empty:
            pass
        else:
            print("check_consistency : "
                  "ERROR - unexpected match for row in result_df: {} identified by the following keys\n")
            print(row)
            return False
    return True


def test_remove_matching_rows_different_columns_no_new_vulnerabilities_detection(global_var):
    print(Util.colour_text(Util.MyColours.BLUE,
                           "*************************************************************************************\n"))
    print("TestCase1: \n test for verifying delta calculation on VA enriched report "
          "when all JIRA(s) were handled during the previous sprint (no new JIRA to open) \n")

    filtered_columns = ['CVE-REF', 'Package Name', 'CXP', 'Package Paths', 'Image Name']

    # The passed frames (left_df and right_df) are coincided to simulate the closure of all vulnerabilities.
    df_result = Util.remove_rows_matching_on_columns_value(pytest.va_repo_n_table, pytest.va_repo_n_table,
                                                           filtered_columns, filtered_columns, pytest.data_path)
    if df_result is None:
        print("test_remove_matching_rows_different_columns_no_new_vulnerabilities_detection: "
              "ERROR the result returned by tested Function is null")
        assert False, "test_remove_matching_rows_different_columns_no_new_vulnerabilities_detection: test failed"

    if not df_result.empty:
        df_result.to_csv(pytest.data_path + "/df_result_for-testcase1-error.csv")
        print("test_remove_matching_rows_different_columns_no_new_vulnerabilities_detection: "
              "ERROR Unexpected data frame result. \n \n "
              "[Unmatched results in: outputData/df_result_for-testcase1-error.csv]")

        assert False, "test_remove_matching_rows_different_columns_no_new_vulnerabilities_detection: test failed"
    else:
        print("test_remove_matching_rows_different_columns_no_new_vulnerabilities_detection: "
              "The test ended successfully. \n \n")


def test_remove_matching_rows_different_columns_new_vulnerabilities_detection(global_var):
    print(Util.colour_text(Util.MyColours.BLUE,
                           "*************************************************************************************\n"))
    print("TestCase2: \n test for verifying delta calculation on VA report between sprint N and "
          "N-1 output works fine on each single row")

    filtered_columns = ['CVE-REF', 'Package Name', 'CXP', 'Package Paths', 'Image Name']
    idx_repo_n = len(pytest.va_repo_n_table)
    idx_repo_n_1 = len(pytest.va_repo_n_table)

    # data[start:]    # items start through the rest of the DataFrame
    va_repo_n_table_cp = pytest.va_repo_n_table.drop(pytest.va_repo_n_table.index[idx_repo_n:])
    va_repo_n_1_table_cp = pytest.va_repo_n_1_table.drop(pytest.va_repo_n_1_table.index[idx_repo_n_1:])
    print("\nInput arg - Subset of VA report table sprint N \n {}".format(va_repo_n_table_cp.count))
    print("\nInput arg - Subset of VA report table sprint N-1 \n {}".format(va_repo_n_1_table_cp.count))

    df_result = Util.remove_rows_matching_on_columns_value(va_repo_n_table_cp, va_repo_n_1_table_cp,
                                                           filtered_columns, filtered_columns,
                                                           pytest.data_path, 'delta_df_cols_diff.xlsx')
    if df_result is None:
        assert False, "test_remove_matching_rows_different_columns_new_vulnerabilities_detection: ERROR " \
                      "the result returned by tested Function is null"
    print('\n', '\n')
    if not check_consistency(va_repo_n_table_cp, va_repo_n_1_table_cp, df_result, filtered_columns, filtered_columns):
        va_repo_n_table_cp.to_csv(pytest.data_path + "/va_repo_n_table_for-testcase2-error.csv")
        va_repo_n_1_table_cp.to_csv(pytest.data_path + "/va_repo_N_1_table_for-testcase2-error.csv")
        df_result.to_csv(pytest.data_path + "/df_result_for-testcase2-error.csv")
        print("test_remove_matching_rows_different_columns_new_vulnerabilities_detection: "
              "ERROR - Unexpected Result.\n \n "
              "[Input table sprint N in: outputData/va_repo_n_table_for-testcase2-error.csv \n "
              "input table sprint N-1 in: outputData/va_repo_N_1_table_for-testcase2-error.csv \n "
              "Unmatched results in: outputData/df_result_for-testcase2-error.csv]")

        assert False, "test_remove_matching_rows_different_columns_new_vulnerabilities_detection: test failed"
    else:
        print("test_remove_matching_rows_different_columns_new_vulnerabilities_detection: "
              "The test ended successfully.\n \n")


def test_remove_matching_rows_different_columns_topic_vulnerabilities_detection():
    print(Util.colour_text(Util.MyColours.BLUE,
                           "*************************************************************************************\n"))
    print("TestCase 3: \n test for verifying delta calculation on a sample dataset containing some key typologies "
          "in order to put relevant case studies to the test")
    print("\n")
    print("Expected behavior for delta calculation:")
    print("1. InputTable N - Redundant key   ; input Table N-1 key present     ; Expected Result: key not present")
    print("2. InputTable N - Redundant key   ; input Table N-1 key not present ; Expected Result: Redundant key")
    print("3. InputTable N - Not present key ; input Table N-1 key present     ; Expected Result: key not present")
    print("4. InputTable N - Single key      ; input Table N-1 key not present ; Expected Result: Single key present")
    print("5. InputTable N - Single key      ; input Table N-1 key present     ; Expected Result: key not present")
    print("\n")

    input_n_repo_table = pd.read_csv('testsuite/testData/cENM-va-report-for-test1-inputN.csv')
    input_n_repo_table = input_n_repo_table.reset_index(drop=True)
    input_n_1_repo_table = pd.read_csv('testsuite/testData/cENM-va-report-for-test1-inputN-1.csv')
    input_n_1_repo_table = input_n_1_repo_table.reset_index(drop=True)
    output_repo_table = pd.read_csv('testsuite/testData/exp-output-report-for-test1.csv', index_col=0)
    output_repo_table = output_repo_table.reset_index(drop=True)
    input_n_test_repo_table = input_n_repo_table.copy()
    input_n_1_test_repo_table = input_n_1_repo_table.copy()
    output_test_repo_table = output_repo_table.copy()

    shutil.rmtree('testsuite/tmp', ignore_errors=True)
    os.mkdir('testsuite/tmp')
    filtered_columns = ['CVE-REF', 'Package Name', 'CXP', 'Package Paths', 'Image Name']
    df_result = Util.remove_rows_matching_on_columns_value(input_n_test_repo_table, input_n_1_test_repo_table,
                                                           filtered_columns, filtered_columns, 'testsuite/tmp')
    if df_result is None:
        print("test_remove_matching_rows_different_columns_topic_vulnerabilities_detection: "
              "ERROR the result returned by tested Function is null")
        assert False, "test_remove_matching_rows_different_columns_topic_vulnerabilities_detection: test failed"

    df_result = df_result.reset_index(drop=True)
    print(df_result)
    print(output_test_repo_table)

    if df_result.equals(output_test_repo_table):
        print("test_remove_matching_rows_different_columns_topic_vulnerabilities_detection: "
              "The test ended successfully. \n")
    else:
        df_result.to_csv(pytest.data_path + "/df_result_for-testcase3-error.csv")
        print("Unmatched results in: outputData/df_result_for-testcase3-error.csv")
        print("test_remove_matching_rows_different_columns_topic_vulnerabilities_detection - "
              "ERROR -  Unexpected Result")
        assert False, "test_remove_matching_rows_different_columns_topic_vulnerabilities_detection: test failed"
    shutil.rmtree('testsuite/tmp')


def test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report(global_var):
    print(Util.colour_text(Util.MyColours.BLUE,
                           "*************************************************************************************\n"))
    print("TestCase4: \n test for removing base image rows from VA enhanced report \n")

    filtered_columns = ['Package Paths', 'CVE-REF', 'Package Name']
    idx_repo_va = len(pytest.va_report_enhanced_table)
    va_report_enhanced_df_cp = pytest.va_report_enhanced_table.drop(pytest.va_report_enhanced_table.index[idx_repo_va:])
    print("\nInput arg - Subset of VA report enhanced table sprint N: \n {}".format(va_report_enhanced_df_cp.count))

    if va_report_enhanced_df_cp is None or va_report_enhanced_df_cp.empty or len(va_report_enhanced_df_cp) == 0:
        print("test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report: "
              "ERROR empty va_report_enhanced input table(s) \n \n assert False, "
              "test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report: "
              "test failed if (pytest.base_image_table is None or pytest.base_image_table.empty or "
              "len(pytest.base_image_table) == 0): Util.colour_text(Util.MyColours.RED, "
              "test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report:"
              " ERROR empty base_image_table input table(s) \n \n")
        assert False, "test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report: test failed"

    df_result = Util.remove_rows_matching_on_columns_value(va_report_enhanced_df_cp, pytest.base_image_table,
                                                           filtered_columns, filtered_columns,
                                                           pytest.data_path, 'delta_df_cols_diff.xlsx', True)
    if df_result is None:
        print("test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report: "
              "ERROR the result returned by tested Function is null")
        assert False, "test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report: test failed"

    if not check_consistency(va_report_enhanced_df_cp, pytest.base_image_table,
                             df_result, filtered_columns, filtered_columns):
        va_report_enhanced_df_cp.to_csv(pytest.data_path + "/va_report_enhanced_table_for-testcase4-error.csv")
        pytest.base_image_table.to_csv(pytest.data_path + "/base_image_table_for-testcase4-error.csv")
        df_result.to_csv(pytest.data_path + "/df_result_for-testcase4-error.csv")
        print("test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report: "
              "ERROR -  Unexpected Result.\n \n Input table in: "
              "outputData/va_report_enhanced_table_for-testcase4-error.csv \n Input table in "
              "outputData/base_image_table_for-testcase4-error.csv \n Unmatched results in: "
              "outputData/df_result_for-testcase4-error.csv")
        assert False, "test_remove_matching_rows_common_columns_erase_baseimage_from_va_enhanced_report: test failed"
    else:
        print("test_remove_matching_rows_common_columns_erase_baseimage_from_nobody_va_enhanced_report:"
              " The test ended successfully.\n \n")
