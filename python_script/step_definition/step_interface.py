"""
    Base abstract class of all functional steps for enriching the scan report with additional
    information used for generating JIRA vulnerability tickets
"""
import sys
from abc import abstractmethod
from typing import Tuple
import logging.config
import pandas as pd

from lib.utility_lib import get_data_from_yaml_file, MyColours, colour_text, strict_types
from step_definition.step_data import StepData


class StepInterface:
    """ This class is the step information and management base structure

    Attributes:
        _step_data (int): (instance attribute)  attribute with current StepData

    Methods:
        execute(): abstract method for executing the step - to implement in the specific step class
        validate(): method for validating df generated - to overwrite in the specific step class
        run_step(): method for step execution
        get_curr_prev_va_report_df(): return the current and previous va report stored in StepData
    """

    def __init__(self, step_data: StepData):
        self._step_data = step_data
        self._step_num = self._step_data.get_step_number()
        # create logger
        logging.config.dictConfig(get_data_from_yaml_file('logging.yaml'))
        self._logger = logging.getLogger("StepInterface")

    @abstractmethod
    def execute(self):
        """
        Abstract method to be defined by implementation derived classes.
        Execute the operation expected for the implementation class
        """
        self._logger.info('CALLING base execute method')

    def validate(self) -> bool:
        """
            step validation to overwrite if validation required
        """
        return True

    def run_step(self):
        """
            run step executing and validating it if required
        """
        self._logger.debug("Executing STEP %d named %s", self._step_num, self.__class__.__name__)
        self.execute()
        if self.validate():
            self._logger.debug("STEP %d named %s completed", self._step_num, self.__class__.__name__)
            self._step_data.inc_step_number()
        else:
            self._logger.error(colour_text(MyColours.RED,
                                            f"STEP {self._step_num} named {self.__class__.__name__} failed"))
            self._logger.debug("Exiting STEP %d.........", self._step_num)
            sys.exit(1)

    @strict_types
    def get_curr_prev_va_report_df(self) -> Tuple[pd.DataFrame, pd.DataFrame]:
        """
            get_curr_prev_va_report_df: return the current and previous va report stored in StepData
        """
        return self._step_data.get_curr_va_report_df, self._step_data.get_prev_va_report_df

    @strict_types
    def get_execution_results(self) -> Tuple:
        """
            get_execution_results: method to be used to return a tuple of output values.
            To be overriden for testing purposes
        """
        pass