"""
    step class used as container for steps execution data such as last enriched scan report
"""
from typing import Union
import pandas as pd


class StepData:
    """ This class is the step information and management base structure

    Class attributes:
        __counter (int): (class attribute) Static attribute count contains total executed steps

    Attributes:
        __original_va_report_df  (pd.DataFrame): (instance attribute) The original va report dataframe
        __va_report_df (pd.DataFrame): (instance attribute) The current va report dataframe
        __base_image_df (pd.DataFrame): (instance attribute) The current base image dataframe
        __va_report_prev_df (pd.DataFrame): (instance attribute) The enriched va report generated by previous step
        __unprocessed_dict (dict): (instance attribute) The dictionary collecting all dataframes
                                to save to unprocessed file
        __step_output_dict (dict): (instance attribute) The dictionary collecting the va report
                                   dataframes for all steps correctly executed


    Methods:
    get_curr_va_report_df(): Return current va report df __va_report_df
    get_prev_va_report_df(): Return current va report df __va_report_prev_df
    set_va_report_data(new_va_report_df: pd.DataFrame):
            save __va_report_df in __va_report_prev_df and replace __va_report_df with new_va_report_df,
            then save in new_va_report_df in __step_output_dict with the proper step number
    get_curr_va_report_df(): getter for __va_report_df (current va report df , the one saved
                             with set_va_report_data)
    get_prev_va_report_df(): getter for __va_report_prev_df
    get_base_image_data(): getter for __base_image_df
    set_base_image_data(self, new_base_image_df: pd.DataFrame):
            replace __base_image_df with new_base_image_df,
            then save in new_va_report_df in __step_output_dict with the proper step number
    get_steps_output_dict: getter for __step_output_dict
    get_unprocessed_dict(): getter for __unprocessed_dict
    add_to_unprocessed_dict(self, new_unprocessed_df: pd.DataFrame, df_name: str): add a new dataframe
                                                                                   to __unprocessed_dict
    get_step_number(): static method for getting __counter
    inc_step_number(): static method for incrementing __counter

    """
    __counter = 0

    def __init__(self, va_report_df: pd.DataFrame, base_image_df: pd.DataFrame):
        self.__original_va_report_df = va_report_df.copy()
        self.__va_report_df = va_report_df.copy()
        self.__base_image_df = base_image_df
        self.__va_report_prev_df = va_report_df.copy()
        self.__unprocessed_dict: dict[str, pd.DataFrame] = {}
        self.__step_output_dict = {'original': self.__original_va_report_df}

    @property
    def get_curr_va_report_df(self) -> pd.DataFrame:
        return self.__va_report_df.copy()

    @property
    def get_prev_va_report_df(self) -> pd.DataFrame:
        return self.__va_report_prev_df.copy()

    def set_va_report_data(self, new_va_report_df: pd.DataFrame):
        self.__va_report_prev_df = self.__va_report_df.copy()
        self.__va_report_df = new_va_report_df
        self.__step_output_dict[f'step_{self.__counter}'] = new_va_report_df.copy()

    @property
    def get_base_image_data(self) -> pd.DataFrame:
        return self.__base_image_df.copy()

    def set_base_image_data(self, new_base_image_df: pd.DataFrame):
        self.__base_image_df = new_base_image_df.copy()

    def get_steps_output_dict(self) -> dict:
        return self.__step_output_dict.copy()

    def get_unprocessed_dict(self, key: str) -> Union[pd.DataFrame, None]:
        if key not in self.__unprocessed_dict:
            return None
        return self.__unprocessed_dict.copy()[key]

    def add_to_unprocessed_dict(self, new_unprocessed_df: pd.DataFrame, df_name: str):
        """
            add a new dataframe to __unprocessed_dict
        """
        self.__unprocessed_dict[df_name] = new_unprocessed_df

    @staticmethod
    def get_step_number() -> int:
        return StepData.__counter

    @staticmethod
    def inc_step_number():
        StepData.__counter += 1
