"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""

import lib.utility_lib as Util
import pandas as pd

from step_definition.step_interface import StepInterface


class StepExpandRow(StepInterface):
    """ This class expand va_report and base_image rows containing Package Path,
    Rpm Package from multiple scanning tools
    """

    ################################################################################################
    #  Address the following use cases:
    #   Package paths = Path1 | path2 e RPM package = RPM1 | RPM2 (split in multiple rows)
    #   Rpm Package = RPM1 and Package Path = path1 | path2 (split into two lines with same
    #       Rpm Package)
    #   Rpm Package = ERIC ERIC split to two or more lines (two or more different Rpms affected by
    #       the same vulnerability - for example two versions of the same RPM)
    #       Package paths = Path1 | path2 | path3 e RPM package = RPM1| RPM2 moved to unprocessed
    #       vulnerabilities
    # It is applied to VA report and base image to allow a proper removal of base image content
    # present in VA report too.
    ################################################################################################
    @Util.strict_types
    def __add_found_in_column(self, table: pd.DataFrame, exact_number_hashtag: bool) -> pd.DataFrame:
        """
        Create a Found in columns for each VA scan tool
        Args:
            exact_number_hashtag: true if hashtag = 2 always
            table (pd.DataFrame): dataframe to add 'Found in' columns
        """
        table['Found in'] = 'Found in trivy: ' + table['Found in trivy'] + '#' + \
                            'Found in anchore_grype: ' + table['Found in anchore_grype'] + '#' + \
                            'Found in xray: ' + table['Found in xray']
        if not exact_number_hashtag:
            table.replace({'Found in': 'Found in trivy: no#'}, {'Found in': ''}, inplace=True, regex=True)
            table.replace({'Found in': 'Found in anchore_grype: no#'}, {'Found in': ''}, inplace=True,
                          regex=True)
            table.replace({'Found in': '#Found in xray: no'}, {'Found in': ''}, inplace=True, regex=True)

        table.drop(['Found in trivy', 'Found in anchore_grype', 'Found in xray'], axis=1, inplace=True)

        return table.copy()

    @Util.strict_types
    def __explode_rows_with_multiple_rpm_space_separated(self, df_to_explode: pd.DataFrame) -> pd.DataFrame:
        """
        Expands rows in columns containing multiple rpms/package path separated by space
        Args:
            df_to_explode (pd.DataFrame): dataframe to expand
        """
        self._logger.info("Executing explode_rows_with_multiple_rpm_space_separated .......")
        return Util.explode_rows_with_separator(df_to_explode, 'Rpm Package', ' ')

    @Util.strict_types
    def __explode_tool_rpm_and_package_path(self, table: pd.DataFrame) -> pd.DataFrame:
        """
        Expands rows in columns containing multiple rpms, package paths, tools separated by space
        Args:
            table (pd.DataFrame): dataframe to expand
        """
        self._logger.debug(f"expand rows of multiple_lines_table when RPM Package and Package Path \
                     are hashtag separated on table (same number) {table.count}")
        table["Rpm Package"] = table["Rpm Package"].str.split('#')
        table["Package Paths"] = table["Package Paths"].str.split('#')
        table["Found in"] = table["Found in"].str.split('#')
        tool_exploded_table = table.explode(["Package Paths", "Rpm Package", "Found in"], ignore_index=True)

        self._logger.debug(f"expand rows of multiple_lines_table when RPM Package and Package Path \
                     are pipes separated on table  (same number) {table.count}")
        tool_exploded_table["Rpm Package"] = tool_exploded_table["Rpm Package"].str.split("|")
        tool_exploded_table["Package Paths"] = tool_exploded_table["Package Paths"].str.split("|")
        pipe_exploded_table = tool_exploded_table.explode(["Package Paths", "Rpm Package"], ignore_index=True)

        self._logger.debug(f"expand row when RPM Package are space separated on table {table.count}")

        return self.__explode_rows_with_multiple_rpm_space_separated(pipe_exploded_table)

    @Util.strict_types
    def __step__expand_rows(self, table_to_expand: pd.DataFrame, table_name: str) -> pd.DataFrame:
        """
        Expands rows in columns containing multiple information data
        Args:
            table_to_expand (pd.DataFrame): dataframe to expand
            table_name (str): name of the table to expand
        """
        self._logger.info("Expand multiple package paths/rpm found by multiple tools for %s", table_name)
        expanded_table = self.__add_found_in_column(table_to_expand, False)
        expanded_table = self.__explode_tool_rpm_and_package_path(expanded_table)
        self._logger.debug("expand multiple package paths/rpm found by multiple tools - STARTING TABLE LEN = %d, "
                     "END TABLE LEN = %d", len(table_to_expand), len(expanded_table))
        return expanded_table

    @Util.strict_types
    def __expand_base_image(self, base_image_df):
        """
        Expands rows in base image.Do nothing if dataframe is empty to avoid exception calling
        explode pandas method
        Args:
            base_image_df (pd.DataFrame): base image dataframe to expand
        """
        if len(base_image_df.columns) != 0:
            expanded_base_image_df = self.__step__expand_rows(base_image_df, 'base_image_table')
            self._step_data.set_base_image_data(expanded_base_image_df)
        else:
            self._logger.warning(
                Util.colour_text(Util.MyColours.YELLOW,
                                 'Skip expand:  base image dataframe is empty'))

    @Util.strict_types
    def __expand_va_report(self, va_report_df):
        """
        Expands rows in va report.Do nothing if dataframe is empty to avoid exception calling
        explode pandas method
        Args:
            va_report_df (pd.DataFrame): base image dataframe to expand
        """
        if len(va_report_df.columns) != 0:
            expanded_va_report_df = self.__step__expand_rows(va_report_df, 'va_scan_table')
            self._step_data.set_va_report_data(expanded_va_report_df)
        else:
            self._logger.warning(Util.colour_text(Util.MyColours.YELLOW,
                                 'Skip expand rows:  va report dataframe is empty'))

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        base_image_df = self._step_data.get_base_image_data
        self.__expand_va_report(va_report_df)
        self.__expand_base_image(base_image_df)
