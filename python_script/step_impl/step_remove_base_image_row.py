"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""
from typing import Tuple

import pandas as pd

import lib.utility_lib as Util

from step_definition.step_data import StepData
from step_definition.step_interface import StepInterface


class StepRemoveBaseImageRow(StepInterface):
    """ This class removes from va_report rows included in base_image on matching columns in
    ['Package Paths', 'CVE-REF', 'Package Name'] basis, only for base_image rows including a
    valid RPM package

    Attributes:
        __base_image_table_no_rpm (pd.DataFrame): (instance attribute) The base image df with
               invalid RPM package name
        __va_scan_table_no_base_image (pd.DataFrame): (instance attribute) The va scan report
               df resulting from base image valid RPM package removal
        __supp_table_dir (str) : path to a pre-created directory for saving diagnostic files
                in case of errors
    """

    @Util.strict_types
    def __init__(self, step_data: StepData, supp_table_dir : str):
        super().__init__(step_data)
        self.__base_image_table_no_rpm = pd.DataFrame()
        self.__va_scan_table_no_base_image = pd.DataFrame()
        self.__supp_table_dir = supp_table_dir

    @Util.strict_types
    def __step__remove_rows_of_base_image(self, va_scan_table_df: pd.DataFrame, base_image_df: pd.DataFrame) -> Tuple[
        pd.DataFrame, pd.DataFrame]:
        self._logger.info("Remove rows in base image matching 'Package Paths, CVE-REF, Package Name' column values")
        self._logger.debug(f'base image filtered by severity = {base_image_df.count}')
        self._logger.info(f"base image table rows = {len(base_image_df)}")
        # remove from base image rows with rpm name different from 'none'
        pattern = r'(ERIC|EXTR)[a-zA-Z0-9]+_CXP\d+:\d{1,2}.\d{1,2}.\d{1,2}'
        condition = base_image_df['Rpm Package'].str.match(pattern)
        base_image_table_no_eric_rpm = base_image_df.loc[~condition].copy()
        self._logger.info(f"base image without eric rpm = {len(base_image_table_no_eric_rpm)}")
        self._logger.info("VA scan table rows = %d", len(va_scan_table_df))
        va_scan_table_df.reset_index()
        base_image_table_no_eric_rpm.reset_index()
        self._logger.info("VA table = %d", len(va_scan_table_df))
        columns_to_match = ['Package Paths', 'CVE-REF', 'Package Name']
        va_scan_table_df = Util.remove_rows_matching_on_columns_value(va_scan_table_df,
                                                                      base_image_table_no_eric_rpm.copy(),
                                                                      columns_to_match, columns_to_match,
                                                                      self.__supp_table_dir, 'step2_df.xlsx',
                                                                      True)
        self._logger.info("VA scan table rows after base image matching rows removal  = %d", len(va_scan_table_df))
        self._logger.debug(f"Original VA table filtered by base image matching row: {va_scan_table_df.count}")
        return va_scan_table_df, base_image_table_no_eric_rpm

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        base_image_df = self._step_data.get_base_image_data

        self.__va_scan_table_no_base_image, self.__base_image_table_no_rpm = \
            self.__step__remove_rows_of_base_image(va_report_df, base_image_df)

        __va_scan_report_updated_df = \
            pd.concat([self.__va_scan_table_no_base_image, self.__base_image_table_no_rpm], ignore_index=True)

        self._logger.info("VA scan table rows after add base image  rows  = %d", len(__va_scan_report_updated_df))
        self._logger.info("STEP %d : remove base image rows - STARTING TABLE LEN = %d ,END TABLE LEN %d , REMOVED LEN = %d",
                    self._step_num,
                    len(self._step_data.get_curr_va_report_df), len(__va_scan_report_updated_df),
                    len(self._step_data.get_curr_va_report_df) - len(self.__va_scan_table_no_base_image))

        self._step_data.set_va_report_data(__va_scan_report_updated_df)

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        self._logger.info("Validating STEP %d .........", self._step_num)

        intersection_len = Util.intersect_df_by_multiple_column(self.__va_scan_table_no_base_image,
                                                                self.__base_image_table_no_rpm,
                                                                ['Package Paths', 'CVE-REF', 'Package Name'])

        if intersection_len != 0:
            msg = "ERROR! Base image rows removal differs " \
                  "between old mode and new mode - " \
                  f"intersection len {intersection_len} .. EXITING"
            self._logger.error(Util.colour_text(Util.MyColours.RED, msg))
            return False
        return True
