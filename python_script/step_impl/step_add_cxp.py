"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""

import pandas as pd

import lib.utility_lib as Util

from step_definition.step_interface import StepInterface


class StepAddCxp(StepInterface):
    """ This class adds va_report CXP manually detected included in path_2_rpm_file.yaml
    """
    # CXP to add yaml file
    PATH_TO_CXP_FILE = './path_2_rpm_associations.yml'

    @Util.strict_types
    def __step__add_cxp_manually_detected(self, table_to_enrich: pd.DataFrame,
                                        dict_from_path_2_rpm_file: dict) -> pd.DataFrame:
        self._logger.info("Add CXP manually detected")
        self._logger.debug("VA scan table rows  = %d", len(table_to_enrich))
        for key, val in dict_from_path_2_rpm_file.items():
            table_to_enrich.loc[table_to_enrich['Package Paths'].str.startswith(key) &
                             (table_to_enrich['Rpm Package'] == 'None'), 'Rpm Package'] = val

        return table_to_enrich

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        # -------------------------------------
        # load dict of CXP to add
        # ------------------------------------
        dict_from_path_2_rpm_file = Util.config_file_to_dictionary(self.PATH_TO_CXP_FILE, 'path_2_rpm_associations')
        va_scan_report_with_cxp_df = self.__step__add_cxp_manually_detected(va_report_df, dict_from_path_2_rpm_file)
        self._step_data.set_va_report_data(va_scan_report_with_cxp_df)

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        self._logger.info("Validating addition CXP manually detected")
        new_df, prev_df = self.get_curr_prev_va_report_df()
        if not Util.validate_table_len(new_df, prev_df):
            error_msg = f'Enhanced va report len {len(new_df)} differs from original ' \
                        f'Va report len {len(prev_df)} ... EXITING'
            self._logger.error(Util.colour_text(Util.MyColours.RED, error_msg))
            return False
        return True
