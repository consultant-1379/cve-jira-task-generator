"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""
from typing import Tuple

import lib.utility_lib as Util
import numpy as np
import pandas as pd

from step_definition.step_interface import StepInterface


class StepSwapCveNoneWithVid(StepInterface):
    """ This class swap content of VID columns with CVE-REF whenever CVE-REF value is None
    """

    @Util.strict_types
    def __step__swap_cve_none_with_vid(self, va_scan_table_df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:
        va_scan_table_swap_cve_vid_df = va_scan_table_df
        cve_none_df = va_scan_table_swap_cve_vid_df[(va_scan_table_swap_cve_vid_df['CVE-REF'] == 'None')]
        self._logger.info("Lines with cve=none to swap with vid: %d", len(cve_none_df))
        va_scan_table_swap_cve_vid_df['CVE-REF'], va_scan_table_swap_cve_vid_df['VulnerabilityID'] = np.where(
            va_scan_table_swap_cve_vid_df['CVE-REF'] == 'None',
            (va_scan_table_swap_cve_vid_df['VulnerabilityID'], va_scan_table_swap_cve_vid_df['CVE-REF']),
            (va_scan_table_swap_cve_vid_df['CVE-REF'], va_scan_table_swap_cve_vid_df['VulnerabilityID']))
        self._logger.debug("Original VA table filtered by Severity without CVE = VID = None rows: "
                     f"\n {va_scan_table_swap_cve_vid_df.count}")
        return va_scan_table_swap_cve_vid_df, cve_none_df

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        va_scan_report_valid_cve_df, cve_none_df = self.__step__swap_cve_none_with_vid(va_report_df)
        self._logger.info("STEP %d swap rows where cve=none and replace with vid - STARTING TABLE LEN = %d, "
                    "END TABLE LEN = %d", self._step_num, len(va_scan_report_valid_cve_df), len(va_report_df))
        self._step_data.add_to_unprocessed_dict(cve_none_df, 'cve_none_df')
        self._step_data.set_va_report_data(va_scan_report_valid_cve_df)

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        self._logger.info("Validating STEP %d .........", self._step_num)
        new_df, prev_df = self.get_curr_prev_va_report_df()
        if not Util.validate_table_len(new_df, prev_df):
            self._logger.error(Util.colour_text(Util.MyColours.RED,
                                          "new table doesn't match the original table len as expected ...EXITING"))
            self._logger.error(Util.colour_text(Util.MyColours.RED,
                                          (f"STEP {self._step_num}: swap rows where cve=none and "
                                           "replace with vid - STARTING TABLE LEN = {len(prev_df)},"
                                           " END TABLE LEN = {len(new_df)}")))
            return False
        return True
