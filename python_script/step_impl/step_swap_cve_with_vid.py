"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""
import lib.utility_lib as Util
import pandas as pd

from step_definition.step_interface import StepInterface


class StepSwapCveWithVid(StepInterface):
    """ This class swap multiple cve (separated by |) with single cve in VID columns
    """

    @Util.strict_types
    def __step__swap_multiple_cve_with_single_vid(self, va_report_df: pd.DataFrame) -> pd.DataFrame:
        self._logger.info(
            "Swap VulnerabilityID row content with CVE_REF whenever CVE_REF is a list of multiple CVEs")
        va_scan_table_swapped = Util.swap(va_report_df, 'CVE-REF', 'VulnerabilityID', '|')
        self._logger.debug(
            "Original VA table filtered by Severity and multiple CVE swapped with VulnerabilityID "
            f"with team and RA: {va_scan_table_swapped.count}")
        self._logger.info("Swap CVE/VID - STARTING TABLE LEN = %d END TABLE LEN = %d", len(va_report_df),
                    len(va_scan_table_swapped))
        return va_scan_table_swapped

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        self._logger.info(
            "STEP %d: swap VulnerabilityID row content with CVE_REF whenever CVE_REF is a list of multiple CVEs",
            self._step_num)
        va_report_df = self._step_data.get_curr_va_report_df
        va_scan_report_swapped_cve_vid_df = self.__step__swap_multiple_cve_with_single_vid(va_report_df)
        self._step_data.set_va_report_data(va_scan_report_swapped_cve_vid_df)

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        # the output table should have exactly the same number of rows as the original one
        # filtered by severity, otherwise there is an issue
        self._logger.info("Validating STEP %d .........", self._step_num)
        new_df, prev_df = self.get_curr_prev_va_report_df()
        if not Util.validate_table_len(new_df, prev_df):
            error_msg = f"ERROR!: new table len {len(new_df)} doesn't match " \
                        f"the original table {len(prev_df)} len ... EXITING"
            self._logger.error(Util.colour_text(Util.MyColours.RED, error_msg))
            return False
        return True
