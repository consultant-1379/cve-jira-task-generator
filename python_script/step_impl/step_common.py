"""
    StepCommon CLASS DEFINITION
    class of methods/constants common to more than one step.
"""
import numpy as np

import lib.utility_lib as Util
import pandas as pd

from shared_var_and_constant import CXP_TABLE__CXP_RESP_TEAM


class StepCommon:
    """ This class check provide a set of public method used by more than one ste
    """

    @classmethod
    @Util.strict_types
    def select_correct_team_ra_cna(cls, df_to_rename_reorder: pd.DataFrame) -> pd.DataFrame:
        """
        Choose the team name from the CXP table as a first choice or from the SG mapping table
        as a second choice. Re-order columns once done.
        Args:
            df_to_rename_reorder(pd.DataFrame): dataframe to add the team to.
        """
        conditions = [
            (df_to_rename_reorder[CXP_TABLE__CXP_RESP_TEAM].isin(['None'])),
            (~df_to_rename_reorder[CXP_TABLE__CXP_RESP_TEAM].isin(['None']))
        ]
        # rename columns to distinguish between data coming from CXP tab or SG tab
        df_to_rename_reorder.rename(
            columns={'Team from PRM': 'Team SG mapping tab', CXP_TABLE__CXP_RESP_TEAM: 'Team CXP tab', 'RA': 'RA SG tab',
                     'Requirement Area': 'RA CXP tab', 'CNA from PRM': 'CNA SG tab', 'Father CNA': 'CNA CXP tab'},
            inplace=True)
        # create a list of the values we want to assign for each condition
        values = [df_to_rename_reorder['Team SG mapping tab'], df_to_rename_reorder['Team CXP tab']]
        # create a new column and use np.select to assign values to it using our lists as arguments
        df_to_rename_reorder["Team"] = np.select(conditions, values)
        # create a list of the values we want to assign for each condition
        values = [df_to_rename_reorder['RA SG tab'], df_to_rename_reorder['RA CXP tab']]
        # create a new column and use np.select to assign values to it using our lists as arguments
        df_to_rename_reorder["RA"] = np.select(conditions, values)
        values = [df_to_rename_reorder['CNA SG tab'], df_to_rename_reorder['CNA CXP tab']]
        # create a new column and use np.select to assign values to it using our lists as arguments
        df_to_rename_reorder["CNA"] = np.select(conditions, values)
        # rename and re-order columns
        df_to_rename_reorder = df_to_rename_reorder.reindex(
            ['Team', 'Team SG mapping tab', 'Team CXP tab', 'RA', 'RA SG tab', 'RA CXP tab', 'CNA', 'CNA SG tab',
             'CNA CXP tab'] + list(
                df_to_rename_reorder.columns.drop(['Team', 'Team SG mapping tab', 'Team CXP tab', 'RA', 'RA SG tab',
                                                   'RA CXP tab', 'CNA', 'CNA SG tab', 'CNA CXP tab'])), axis=1)

        return df_to_rename_reorder

    @classmethod
    @Util.strict_types
    def add_columns_from_sg_mapping_table(cls, df_to_complete: pd.DataFrame, df_columns_to_add: pd.DataFrame,
                                          left_ref_col: list, right_ref_col: list) -> pd.DataFrame:
        """
        Add some columns from SG mapping table to the df_to_complete dataframe and re-order columns
        Args:
            df_to_complete(pd.DataFrame): dataframe to add to the  required columns
            df_columns_to_add (pd.DataFrame): dataframe containing required columns
            left_ref_col (list): left dataframe column to use for matching before merging the 2 dataframe
            right_ref_col (list): right dataframe column to use for matching before merging the 2 dataframe
        """
        df_to_complete = Util.add_columns_from_a_df_to_another_df(df_to_complete, df_columns_to_add,
                                                                  left_ref_col, right_ref_col)
        df_to_complete = df_to_complete.reindex(
            ['Team from PRM', 'RA', 'CNA from PRM'] + list(
                df_to_complete.columns.drop(['Team from PRM', 'RA', 'CNA from PRM', 'SG List from VA Scan'])), axis=1)
        return df_to_complete
