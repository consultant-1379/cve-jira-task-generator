"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""
from typing import Tuple, Union

import lib.utility_lib as Util
import pandas as pd

from step_definition.step_data import StepData
from step_definition.step_interface import StepInterface
from step_impl.step_common import StepCommon

from shared_var_and_constant import TEAM_NAME_NOT_IN_JIRA, RA_NOT_IN_JIRA, REASON_MISSING_UNKNOWN_RESP_TEAM_AND_OR_RA, \
    REASON_TEAM_NAME_NOT_IN_JIRA, REASON_RA_NOT_IN_JIRA, CXP_TABLE__CXP_RESP_TEAM, REASON_XRAY


class StepSaveUnprocessedData(StepInterface):
    """ This class complete and save  the 'Unprocessed' file adding reason for discard column and
        missing information

    Attributes:
        __unprocessed_file (pd.DataFrame): (instance attribute) The unprocessed df to complete with reason and
               missing information

        __sg_mapping_table (pd.DataFrame): (instance attribute) The SG_mapping df matching
               SG/image_name with teams/RA/CNA
    """

    def __init__(self, step_data: StepData, unprocessed_file: str, sg_mapping_table: pd.DataFrame):
        super().__init__(step_data)
        self.__unprocessed_file = unprocessed_file
        self.__sg_mapping_table = sg_mapping_table.copy()

    @Util.strict_types
    def __get_xray_data_and_remove(self) -> Tuple[Union[pd.DataFrame, None], Union[pd.DataFrame, None]]:
        # main data
        va_report_df = self._step_data.get_curr_va_report_df
        main_filter_str = va_report_df["CVE-REF"].str.contains("XRAY-")
        main_xray_filtered_df = va_report_df[main_filter_str]
        main_removed_xray_filtered_df = va_report_df[~main_filter_str]
        self._step_data.set_va_report_data(main_removed_xray_filtered_df)
        # unprocessed data
        unprocessed_xray_filtered_df = None
        team_ra_cna_missing_df = self._step_data.get_unprocessed_dict('team_ra_cna_missing_df')
        if team_ra_cna_missing_df is not None:
            unprocessed_filter_str = team_ra_cna_missing_df["CVE-REF"].str.contains("XRAY-")
            unprocessed_xray_filtered_df = team_ra_cna_missing_df[unprocessed_filter_str]
            unprocessed_removed_xray_filtered_df = team_ra_cna_missing_df[~unprocessed_filter_str]
            self._step_data.add_to_unprocessed_dict(unprocessed_removed_xray_filtered_df, 'team_ra_cna_missing_df')
        return main_xray_filtered_df, unprocessed_xray_filtered_df

    @Util.strict_types
    def __complete_pre_processed_va_report_wrong_rows(self, pre_discarded_rows_df: pd.DataFrame) -> pd.DataFrame:
        pre_discarded_rows_df.fillna('None', inplace=True)
        empty_columns_to_add = [CXP_TABLE__CXP_RESP_TEAM, 'Requirement Area', 'Father CNA']
        for col_name in empty_columns_to_add:
            pre_discarded_rows_df[col_name] = pre_discarded_rows_df.get(col_name, 'None')
        # merge VA report table and SG Mapping Table on an SG basis
        self._logger.debug("Merge VA report table and SG Mapping Table.xlsx on a SG basis")
        columns_to_add_from_sg_tab = ['SG List from VA Scan', 'Team from PRM', 'RA', 'CNA from PRM']
        pre_discarded_rows_df = StepCommon.add_columns_from_sg_mapping_table(pre_discarded_rows_df,
                                                                  self.__sg_mapping_table[
                                                                  columns_to_add_from_sg_tab],
                                                                  ['Image Name'], ['SG List from VA Scan'])
        # add just team/ra/cna from image name, not being possible to expand row and get a proper rpm if any
        pre_discarded_rows_df = StepCommon.select_correct_team_ra_cna(pre_discarded_rows_df)
        # added to avoid problem merging the dataframe if some columns to merge are already in. It should work
        # according to pandas documentation. To be reviewed lately
        columns_to_remove = ['Team from PRM', 'RA', 'CNA from PRM', 'CXP', CXP_TABLE__CXP_RESP_TEAM,
                             'Requirement Area',
                             'Father CNA']
        pre_discarded_rows_df.drop(
            [x for x in columns_to_remove if x in pre_discarded_rows_df.columns], axis=1, inplace=True)
        # move Reason column in the last position place
        reason_df = pre_discarded_rows_df.pop('Reason')
        pre_discarded_rows_df = pd.concat([pre_discarded_rows_df, reason_df], axis=1)
        return pre_discarded_rows_df

    @Util.strict_types
    def __get_unprocessed_df(self) -> Tuple[
        Union[pd.DataFrame, None], Union[pd.DataFrame, None], Union[pd.DataFrame, None], Union[
            pd.DataFrame, None]]:
        team_ra_cna_missing_df = self._step_data.get_unprocessed_dict('team_ra_cna_missing_df')
        pre_process_discarded_rows_df = self._step_data.get_unprocessed_dict('pre_process_discarded_rows_df')
        jira_team_name_missing_df = self._step_data.get_unprocessed_dict(TEAM_NAME_NOT_IN_JIRA)
        jira_ra_missing_df = self._step_data.get_unprocessed_dict(RA_NOT_IN_JIRA)
        return pre_process_discarded_rows_df, team_ra_cna_missing_df, \
               jira_team_name_missing_df, jira_ra_missing_df

    @Util.strict_types
    def __save_unprocessed_to_excel_file(self):
        # save removed rows in unprocessed vulnerability report
        # this step as to be done when all dataframes to be saved as unprocessed are available
        # and all dataframes have the same number of column as the original VA scan table
        # Please consider whenever the CVID/VID or both are not valid, no information on Team/Ra/Cna
        # are available in unprocessed file

        columns_to_remove = ['Team SG mapping tab', 'Team CXP tab', 'RA SG tab', 'RA CXP tab',
                            'CNA SG tab', 'CNA CXP tab', 'Rpm Package', 'to_discard']
        # getting xray data
        xray_unproc_vuln_df = pd.DataFrame()
        main_xray_filtered_df, unprocessed_xray_filtered_df = self.__get_xray_data_and_remove()
        if main_xray_filtered_df is not None \
            and unprocessed_xray_filtered_df is not None:
            # concatenate all into a single dataframe
            xray_unproc_vuln_df = pd.concat([main_xray_filtered_df, unprocessed_xray_filtered_df])
            # adding the reason
            xray_unproc_vuln_df['Reason'] = REASON_XRAY
            # remove rows added for reordering and renaming final columns
            xray_unproc_vuln_df.drop([x for x in columns_to_remove if x in xray_unproc_vuln_df.columns], axis=1,
                                inplace=True)
            # clean-up useless unnamed columns
            xray_unproc_vuln_df = xray_unproc_vuln_df.filter(regex=r'^(?!(.*Unnamed:.*$))')
        else:
            self._logger.warning(
                "Impossible to generate unprocessed data for the XRAY sheet, no data was found."
            )

        # getting other unprocessed data
        unproc_vuln_df = pd.DataFrame()
        pre_process_discarded_rows_df, team_ra_cna_missing_df, \
        jira_missing_team_name_df, jira_missing_ra_df = self.__get_unprocessed_df()
        # adding the reasons & concatenate
        if team_ra_cna_missing_df is not None:
            team_ra_cna_missing_df['Reason'] = REASON_MISSING_UNKNOWN_RESP_TEAM_AND_OR_RA
            unproc_vuln_df = pd.concat([team_ra_cna_missing_df, unproc_vuln_df])
        if jira_missing_team_name_df is not None:
            jira_missing_team_name_df['Reason'] = REASON_TEAM_NAME_NOT_IN_JIRA
            unproc_vuln_df = pd.concat([jira_missing_team_name_df, unproc_vuln_df])
        if jira_missing_ra_df is not None:
            jira_missing_ra_df['Reason'] = REASON_RA_NOT_IN_JIRA
            unproc_vuln_df = pd.concat([jira_missing_ra_df, unproc_vuln_df])
        if pre_process_discarded_rows_df is not None:
            pre_process_discarded_rows_df = self.__complete_pre_processed_va_report_wrong_rows(pre_process_discarded_rows_df)
            unproc_vuln_df = pd.concat([pre_process_discarded_rows_df, unproc_vuln_df])
        if not unproc_vuln_df.empty:
            # remove rows added for reordering and renaming final columns
            unproc_vuln_df.drop([x for x in columns_to_remove if x in unproc_vuln_df.columns], axis=1,
                                inplace=True)
            # clean-up useless unnamed columns
            unproc_vuln_df = unproc_vuln_df.filter(regex=r'^(?!(.*Unnamed:.*$))')
        else:
            self._logger.warning(
                "Impossible to generate unprocessed data for the MAIN sheet, no data was found."
            )

        # saving data to file
        df_list = [unproc_vuln_df, xray_unproc_vuln_df]
        sheet_name_list = ['MAIN', 'XRAY']
        sheet_header_list = [True, True]
        if not unproc_vuln_df.empty and not xray_unproc_vuln_df.empty:
            Util.write_sheets_to_excel(self.__unprocessed_file, df_list, sheet_name_list,
                                        sheet_header_list)
        elif not unproc_vuln_df.empty:
            Util.write_sheet_to_excel(self.__unprocessed_file, unproc_vuln_df, 'MAIN')
        elif not xray_unproc_vuln_df.empty:
            Util.write_sheet_to_excel(self.__unprocessed_file, xray_unproc_vuln_df, 'XRAY')
        else:
            self._logger.warning("No generated unprocessed file")

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        self._logger.info(
            "STEP %d: Collect all unprocessed cve and add as much information as possible to the 'Unprocessed' file",
            self._step_num)
        self.__save_unprocessed_to_excel_file()
        self._logger.info("STEP %d: Finished processing.", self._step_num)
