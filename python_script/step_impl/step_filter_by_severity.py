"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""

import pandas as pd

import lib.utility_lib as Util

from step_definition.step_data import StepData
from step_definition.step_interface import StepInterface


class StepFilterBySeverity(StepInterface):
    """ This class filter va_report, base_image and  pre-processed df by the specified
    severity in config_properties.yml file

    Attributes:
        __severities (list): (instance attribute) The severities to filter by
        __pre_processed_df (pd.DataFrame): (instance attribute) The pre-processed df
                                            including rows to put in unprocessed file

    """

    ################################################################################################
    # Filter by severities
    ################################################################################################
    @Util.strict_types
    def __init__(self, step_data: StepData, pre_processed_df: pd.DataFrame, filter_by_severities: list):

        super().__init__(step_data)
        self.__severities = filter_by_severities
        self.__pre_processed_df = pre_processed_df.copy()

    @Util.strict_types
    def __step__filter_table_by_severities(self, table_to_filter: pd.DataFrame, table_name: str,
                                         severities_to_filter_by: list) -> pd.DataFrame:
        self._logger.debug("Filter by %s severity table %s", severities_to_filter_by, table_name)
        filtered_table = Util.filter_table_by(table_to_filter, 'Severity', severities_to_filter_by)
        self._logger.debug(f"Table {table_name} filtered by {severities_to_filter_by}: {filtered_table.count}")
        self._logger.info("Filter by severity - STARTING TABLE LEN = %d, END TABLE LEN = %d",
                    len(table_to_filter), len(filtered_table))
        return filtered_table

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        base_image_df = self._step_data.get_base_image_data
        filtered_va_report_df = self.__step__filter_table_by_severities(va_report_df, 'va_report_df', self.__severities)
        filtered_base_image_df = self.__step__filter_table_by_severities(base_image_df, 'base_image_df', self.__severities)

        if len(self.__pre_processed_df.columns) != 0 and len(self.__pre_processed_df) != 0:
            filtered_pre_processed_df = self.__step__filter_table_by_severities(
                self.__pre_processed_df.copy(), 'pre_processed_df', self.__severities)
            self._step_data.add_to_unprocessed_dict(
                filtered_pre_processed_df, 'pre_process_discarded_rows_df')

        self._step_data.set_va_report_data(filtered_va_report_df)
        self._step_data.set_base_image_data(filtered_base_image_df)
