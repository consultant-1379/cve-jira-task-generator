"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""
from typing import Tuple

import lib.utility_lib as Util
import pandas as pd

from step_definition.step_interface import StepInterface

from step_impl.step_common import StepCommon


class StepSetTeamColumnAndReorder(StepInterface):
    """ This class build 'Team' column depending on availability of CXP or only SG
        (for assigning CVE to the more suitable responsible team).
        Remove duplicated or support columns, remove rows with missing team/RA/CNA
    """

    @Util.strict_types
    def __step__build_team_rename_reorder_columns(self, va_scan_table_df: pd.DataFrame) -> Tuple[
        pd.DataFrame, pd.DataFrame]:
        va_scan_table__step12 = StepCommon.select_correct_team_ra_cna(va_scan_table_df)
        self._logger.debug(
            f"Original VA table re-ordered with only expected output columns \n {va_scan_table__step12.count}")
        check_team_ra_cna_none = ((va_scan_table__step12['Team'] == 'None') &
                                  (va_scan_table__step12['RA'] == 'None'))
        team_ra_cna_missing_df = va_scan_table__step12[check_team_ra_cna_none]
        va_scan_table__step12 = va_scan_table__step12[~check_team_ra_cna_none]
        return va_scan_table__step12, team_ra_cna_missing_df

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        va_scan_report_clean_df, team_ra_cna_missing_df = self.__step__build_team_rename_reorder_columns(va_report_df)
        self._logger.info("STEP %d: build Team column depending on availability of CXP or only SG. Select from "
                    "va_scan_severity_tab team/RA/CNA information and re-order/remove columns "
                    "- STARTING TABLE LEN = %d, END TABLE LEN = %d",
                    self._step_num, len(va_report_df), len(va_scan_report_clean_df))
        self._step_data.add_to_unprocessed_dict(team_ra_cna_missing_df, 'team_ra_cna_missing_df')
        self._step_data.set_va_report_data(va_scan_report_clean_df)

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        self._logger.info("Validating STEP %d .........", self._step_num)
        new_df, prev_df = self.get_curr_prev_va_report_df()
        team_ra_cna_missing_df = self._step_data.get_unprocessed_dict('team_ra_cna_missing_df')
        if len(new_df) != (len(prev_df) - len(team_ra_cna_missing_df)):
            self._logger.error("New table len %d doesn't match the original table len %d ... EXITING",
                         len(new_df), len(prev_df))
            return False
        return True
