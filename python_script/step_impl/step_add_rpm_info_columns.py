"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""

import lib.utility_lib as Util
import pandas as pd

from step_definition.step_interface import StepInterface


class StepAddRpmInfoColumns(StepInterface):
    """ This class expand the
    'Rpm Package' column adding 'Rpm Name', 'Rpm Version' , 'CXP from Rpm Name'
    columns to va_report
    """

    EXTRACT_RPM_CXP_REGEX = '_(CXP\\d+):'
    EXTRACT_RPM_NAME_REGEX = '(.+):'
    EXTRACT_RPM_VER_REGEX = ':(.+)$'

    @Util.strict_types
    def __step__add_rpm_name_rpm_ver_cxp_columns(self, va_scan_table__step3: pd.DataFrame) -> pd.DataFrame:
        va_scan_table__step4 = va_scan_table__step3.copy()
        va_scan_table__step4['Rpm Name'] = va_scan_table__step4['Rpm Package'].apply(
            lambda x: Util.extract_string_by_regex(x, self.EXTRACT_RPM_NAME_REGEX))
        va_scan_table__step4['Rpm Version'] = va_scan_table__step4['Rpm Package'].apply(
            lambda x: Util.extract_string_by_regex(x, self.EXTRACT_RPM_VER_REGEX))
        va_scan_table__step4['CXP from Rpm Name'] = va_scan_table__step4['Rpm Package'].apply(
            lambda x: Util.extract_string_by_regex(x, self.EXTRACT_RPM_CXP_REGEX))
        return va_scan_table__step4

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        va_scan_report_with_rpm_columns_df = self.__step__add_rpm_name_rpm_ver_cxp_columns(va_report_df)

        self._logger.debug(
            "Original VA table with Rpm Name/Rpm ver/CXP from Rpm Name %s", va_scan_report_with_rpm_columns_df.count)
        self._logger.info(
            "STEP %d: add rpm name, ver, cxp columns - STARTING TABLE LEN = %d, END TABLE LEN = %d",
            self._step_num,
            len(va_report_df),
            len(va_scan_report_with_rpm_columns_df))

        self._step_data.set_va_report_data(va_scan_report_with_rpm_columns_df)

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        self._logger.info("Validating STEP %s .........", self._step_num)
        new_df, prev_df = self.get_curr_prev_va_report_df()
        if not Util.validate_table_len(new_df, prev_df):
            self._logger.error(Util.colour_text(Util.MyColours.RED,
                                          "new table doesn't match the previous table len... EXITING"))
            return False
        if len(new_df.columns) != len(prev_df.columns) + 3:
            self._logger.error(Util.colour_text(Util.MyColours.RED, "new table columns number doesn't match "
                                                              "the expected columns number ... EXITING"))
            return False
        return True
