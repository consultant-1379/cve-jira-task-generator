"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""
import os

from typing import Tuple

import lib.utility_lib as Util
import pandas as pd

from step_definition.step_data import StepData
from step_definition.step_interface import StepInterface
from shared_var_and_constant import VA_REPORT_WITH_TEAM_RA, CXP_TABLE__CXP_RESP_TEAM
from step_impl.step_common import StepCommon


class StepAddTeamRaCna(StepInterface):
    """ This class adds team, RA , CNA info  columns to va_report

    Attributes:
        __sg_table (pd.DataFrame): (instance attribute)
            The SG_mapping df matching SG/image_name with teams/RA/CNA
        __cxp_df (pd.DataFrame): (instance attribute)
            The CXP_table df matching CXP with teams/RA/CNA
        __intermediate_df (pd.DataFrame): (instance attribute) an intermediate df , after matching
            only with SG df. It is used only for validation and diagnostic file generation in case
            of error
        __supp_table_dir (str) : path to a pre-created directory for saving diagnostic files
                in case of errors
    """
    CXP_TABLE__CXP_NUMBER = 'CXP'  # the CXP number: CXP xxx yyyy

    @Util.strict_types
    def __init__(self, step_data: StepData, sg_table: pd.DataFrame, cxp_df: pd.DataFrame, supp_table_dir: str):
        super().__init__(step_data)
        self.__sg_table = sg_table
        self.__cxp_df = cxp_df
        self.__intermediate_df = None
        self.__supp_table_dir = supp_table_dir

    @Util.strict_types
    def __generate_supp_file_for_sg_rows_ocurrences(self, df1_cp: pd.DataFrame, df2_cp: pd.DataFrame,
                                                    step_num: int,
                                                    col1: str,
                                                    col2: str,
                                                    name1: str,
                                                    name2: str):
        self._logger.info("Executing generate_supp_file_for_SG_rows_ocurrences .....")
        out_col_name1 = f"{name1} {col1}"
        out_col_name2 = f"{name2} {col2}"
        old_opt = pd.get_option("display.max_rows")
        pd.set_option("display.max_rows", None)
        df1_cp = df1_cp.rename(columns={col1: out_col_name1}, errors="raise")
        df2_cp = df2_cp.rename(columns={col2: out_col_name2}, errors="raise")
        df_all = pd.concat(
            [df1_cp[out_col_name1].value_counts().to_frame(name=out_col_name1),
             df2_cp[out_col_name2].value_counts().to_frame(name=out_col_name2)], axis=1)
        pd.set_option("display.max_rows", old_opt)
        row_series = df_all.loc[df_all[[out_col_name1, out_col_name2]].nunique(1) > 1]
        self._logger.warning("The following row/rows has/have different and unexpected values\n %s."
                       "\nPlease check", row_series)
        filename = f"step{step_num}_compare_{name1}_{col1}_{name2}_{col2}.xlsx"
        df_all.to_excel(os.path.join(self.__supp_table_dir, filename))
        pd.set_option("display.max_rows", old_opt)
        self._logger.info("display.max_rows %s", old_opt)

    @Util.strict_types
    def __generate_supp_file_for_missing_cxp(self, new_df: pd.DataFrame, new_intermediate_df: pd.DataFrame, step_num: int,
                                           prev_df: pd.DataFrame,
                                           cxp_df_cp: pd.DataFrame):
        self._logger.info("Executing generate_supp_file_for_missing_cxp .....")
        pre_step_filename = os.path.join(self.__supp_table_dir, f'step{step_num -1}_df.xlsx')
        curr_step_intermediate_filename = os.path.join(self.__supp_table_dir, f'step{step_num}_intermediate_df_.xlsx')
        curr_step_filename = os.path.join(self.__supp_table_dir, f'step{step_num}_df.xlsx')
        step4_isin_filename = os.path.join(self.__supp_table_dir, f'step{step_num}_missing_CXP_in_CXP_table.xlsx')
        new_df.to_excel(curr_step_filename, engine='openpyxl')
        new_intermediate_df.to_excel(curr_step_intermediate_filename, engine='openpyxl')
        prev_df.to_excel(pre_step_filename, engine='openpyxl')
        cxp_df_cp['Isin'] = cxp_df_cp["CXP"].isin(new_intermediate_df["CXP from Rpm Name"])
        cxp_df_cp.to_excel(step4_isin_filename, engine='openpyxl')
        self._logger.debug("See the autogenerated files for analyzing the problem: %s %s %s %s", pre_step_filename,
                     curr_step_intermediate_filename, curr_step_filename, step4_isin_filename)

    @Util.strict_types
    def __add_columns_from_cxp_table(self, df_to_complete: pd.DataFrame, df_columns_to_add: pd.DataFrame,
                                   left_ref_col: list,
                                   right_ref_col: list) -> pd.DataFrame:
        return Util.add_columns_from_a_df_to_another_df(df_to_complete, df_columns_to_add, left_ref_col,
                                                        right_ref_col)

    @Util.strict_types
    def __step__add_team_ra_cna(self, va_scan_report_df: pd.DataFrame, sg_table: pd.DataFrame,
                              cxp_df: pd.DataFrame) -> \
            Tuple[pd.DataFrame, pd.DataFrame]:
        columns_to_add = ['SG List from VA Scan', 'Team from PRM', 'RA', 'CNA from PRM']
        intermediate_df = StepCommon.add_columns_from_sg_mapping_table(va_scan_report_df,
                                                            sg_table[columns_to_add],
                                                            ['Image Name'], ['SG List from VA Scan'])
        Util.write_sheet_to_excel(os.path.join(self.__supp_table_dir, VA_REPORT_WITH_TEAM_RA), intermediate_df)
        columns_to_add = ['CXP', CXP_TABLE__CXP_RESP_TEAM, 'Requirement Area', 'Father CNA']
        va_scan_report_df = self.__add_columns_from_cxp_table(intermediate_df,
                                                       cxp_df[columns_to_add], ['CXP from Rpm Name'], ['CXP'])
        return va_scan_report_df, intermediate_df

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        va_scan_report_with_team_ra_cna_df, self.__intermediate_df = self.__step__add_team_ra_cna(va_report_df,
                                                                                           self.__sg_table,
                                                                                           self.__cxp_df)
        self._logger.debug("Team/Ra/Cna added %s", va_scan_report_with_team_ra_cna_df.count)
        self._step_data.set_va_report_data(va_scan_report_with_team_ra_cna_df)
        self._logger.info("STEP %d: Add Team/Ra/Cna  - STARTING TABLE LEN = %d, END TABLE LEN = %d",
                    self._step_num, len(va_report_df), len(va_scan_report_with_team_ra_cna_df))

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        self._logger.info("Validating STEP %d .........", self._step_num)
        new_df, prev_df = self.get_curr_prev_va_report_df()

        #  Try checking CXPs missing in CXP table present in VA report
        if not Util.validate_table_len(new_df, prev_df):
            msg = f"new table len {len(new_df)} doesn't match the original table len {len(prev_df)}...ANALYZING"
            self._logger.error(Util.colour_text(Util.MyColours.RED, msg))

            self.__generate_supp_file_for_missing_cxp(new_df, self.__intermediate_df, self._step_num,
                                               self._step_data.get_prev_va_report_df, self.__cxp_df)
            # try to analyze problem comparing SG number of occurences.......
            if not Util.validate_table_output(new_df, 'Image Name', prev_df, 'Image Name'):
                self._logger.error(Util.colour_text(Util.MyColours.RED,
                                              "SG occurrences doesn't match the original table (wrong input table?)."
                                              " See compare excel table for details...EXITING"))

                self.__generate_supp_file_for_sg_rows_ocurrences(new_df, prev_df, self._step_num,
                                             'Image Name', 'Image Name', 'new_df', 'prev_df')
            return False
        return True
