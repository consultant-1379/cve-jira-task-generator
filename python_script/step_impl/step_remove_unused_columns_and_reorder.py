"""
    StepInterface IMPLEMENTATION CLASS DEFINITION for generating from a va scan vulnerability report
    an enhanced processed vulnerability .xlsx file, including additional information.
    Each step implementation class do a single specific operation.
    The order in which step implementation classes are called is , for some steps, mandatory and
    driven by the main in va_enrich_report_generator.py file
"""
import lib.utility_lib as Util
import pandas as pd

from step_definition.step_interface import StepInterface
from step_definition.step_data import StepData


class StepRemoveUnusedColumnsAndReorder(StepInterface):
    """ This class removes columns not required and re-order columns
    """

    @Util.strict_types
    def __init__(self, step_data: StepData):
        super().__init__(step_data)
        self.__columns_to_remove = ['Team SG mapping tab', 'Team CXP tab', 'RA SG tab', 'RA CXP tab',
                                    'CNA SG tab', 'CNA CXP tab', 'Rpm Package', 'Reason', 'to_discard']

    @Util.strict_types
    def __step__remove_unused_columns(self, va_scan_table_df: pd.DataFrame,
                                    columns_to_remove: list) -> pd.DataFrame:
        """
        Remove unused columns from va scan enhanced report previously added for processing purpose or
        pre-existing
        Args:
            va_scan_table_df: va report dataframe enhanced
            columns_to_remove: list of columns to remove

        Returns: va report dataframe without Team name not available on Jira and
        unprocessed dataframe with Team name not available on Jira
        """
        va_scan_table_remove_columns = va_scan_table_df
        self._logger.debug("Original VA table re-ordered with only expected output columns \n"
                     f" {va_scan_table_remove_columns.count}")

        self._logger.info("Removing columns %s", columns_to_remove)
        va_scan_table_remove_columns.drop(columns=columns_to_remove, axis=1, inplace=True)
        return va_scan_table_remove_columns

    def execute(self):
        """
        Base class abstract method implementation.
        Execute the operation expected for this step class
        """
        va_report_df = self._step_data.get_curr_va_report_df
        va_scan_report_clean_df = self.__step__remove_unused_columns(va_report_df, self.__columns_to_remove)
        self._logger.info("STEP %d: Remove from va_scan_severity_tab information not required columns "
                    "- STARTING TABLE LEN = %d, END TABLE LEN = %d",
                    self._step_num, len(va_report_df), len(va_scan_report_clean_df))
        self._step_data.set_va_report_data(va_scan_report_clean_df)

    def validate(self) -> bool:
        """
        Base class overriden method.
        Validate the operation expected for this step class
        """
        self._logger.info("Validating STEP %d .........", self._step_num)
        new_df, prev_df = self.get_curr_prev_va_report_df()
        if not Util.validate_table_len(new_df, prev_df):
            self._logger.error("New table len %d doesn't match the original table len %d  ... EXITING",
                         len(new_df), len(prev_df))
            return False
        if len(new_df.columns) != len(prev_df.columns) - len(self.__columns_to_remove):
            self._logger.error("New table %d columns len doesn't match the expected columns len %d ... EXITING",
                         len(new_df.columns), len(prev_df.columns))
            return False
        return True
