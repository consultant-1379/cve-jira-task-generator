"""
    Utility function for va_enrich_report_generator module
"""
import sys
import os
from datetime import datetime
from typing import Tuple, Union
import logging.config
import pandas as pd
import lib.utility_lib as Util

from shared_var_and_constant import CXP_TABLE__CXP_RESP_TEAM
from step_definition.step_data import StepData


####################################################
# CONSTANT DEFINITION
####################################################

# create logger
logging.config.dictConfig(Util.get_data_from_yaml_file('logging.yaml'))
logger = logging.getLogger("va_enrich_report_generator_utility")

# Configuration file
CONFIG_PROPERTY_FILE = './config_properties.yml'


# -------------------------------------------------------------------------------
# INTERNAL UTILITY FUNCTION
# -------------------------------------------------------------------------------


@Util.strict_types
def load_input_tables() -> Tuple[Union[pd.DataFrame, None], Union[pd.DataFrame, None],
                                 Union[pd.DataFrame, None], Union[pd.DataFrame, None],
                                 Union[pd.DataFrame, None], Union[pd.DataFrame, None]]:
    """
    Load from Excel/csv file the input table to process and db input tables

    Returns:
        a tuple of the required tables
    """
    dict_from_config_file = Util.config_file_to_dictionary(CONFIG_PROPERTY_FILE,
                                                           'csv_generator_properties')
    # ----------------------------------------------
    # Adjust Windows filenames for Linux
    # ----------------------------------------------
    base_image_table_file_name, cxp_table_file_name,  \
        sg_mapping_table_file_name, va_scan_table_file_name,  \
        team_inv_table_file_name, jira_file_name = get_input_files(dict_from_config_file)
    logger.info("sg_mapping_table file:         %s", sg_mapping_table_file_name)
    logger.info("va_scan_table file:            %s", va_scan_table_file_name)
    logger.info("base_image_table file:         %s", base_image_table_file_name)
    logger.info("cxp_table file:                %s", cxp_table_file_name)
    logger.info("team_inv_table file:           %s", team_inv_table_file_name)
    logger.info("jira_file_name file:           %s", jira_file_name)

    sg_mapping_table = Util.get_df_from_spreadsheet_file(sg_mapping_table_file_name)
    va_scan_table = Util.get_df_from_spreadsheet_file(va_scan_table_file_name)
    base_image_table = Util.get_df_from_spreadsheet_file(base_image_table_file_name)
    cxp_table = Util.get_df_from_spreadsheet_file(cxp_table_file_name)
    team_inv_table = Util.get_df_from_spreadsheet_file(team_inv_table_file_name)
    jira_table_df = Util.get_df_from_spreadsheet_file(jira_file_name)

    return sg_mapping_table, va_scan_table, base_image_table, cxp_table, team_inv_table, \
           jira_table_df


@Util.strict_types
def get_current_date_time() -> str:
    """
    Get the current date and time from datetime library if not provided as input parameter by
    main.py

    Returns:
        the current date and time in str format
    """
    if len(sys.argv) > 1:
        current_date_time = sys.argv[1]
    else:
        current_date_time = datetime.today().strftime("%Y-%m-%d_%H_%M_%S")
    logger.info(current_date_time)
    return current_date_time


# --------------------------------------------------------------------------------
# MAIN FUNCTIONS
# --------------------------------------------------------------------------------
# WARNING:
# to be used only if the script is launched standalone

@Util.strict_types
def get_input_files(input_data_dictionary: dict) -> Tuple[Union[str, None], Union[str, None], Union[str, None],
                                                          Union[str, None], Union[str, None], Union[str, None]]:
    """
    Get input tables filenames from config_properties yaml file

    Args:
        input_data_dictionary: dict containing name of files to load

    Returns: a tuple including all the filename or None if the dict key is invalid
    """
    if input_data_dictionary is not None:
        sg_mapping_table_file = \
            'clean_' + Util.get_file_from_dictionary(input_data_dictionary, 'sg_mapping_table')
        va_scan_table_file = Util.get_va_report_clean_file_name()
        base_image_table_file = Util.get_base_image_clean_file_name()
        cxp_table_file = \
            'clean_' + Util.get_file_from_dictionary(input_data_dictionary, 'cxp_table')
        team_inv_table_file = Util.get_file_from_dictionary(input_data_dictionary, 'team_inv_table')
        jira_table_file = Util.get_file_from_dictionary(input_data_dictionary, 'jira_table')
        return base_image_table_file, cxp_table_file, sg_mapping_table_file, va_scan_table_file,  \
               team_inv_table_file, jira_table_file

    return None, None, None, None, None, None


@Util.strict_types
def generate_additional_output_files(step_info: StepData, output_dir: str, debug_flag: bool = False):
    """
    Generate an Excel files where each sheet contains output of step executed.
    Used only for debug purpose

    Args:
        step_info: StepData containing intermediate output
        output_dir: str destination path of output file
        debug_flag: bool, default False, True for generating steps output multisheet

    """
    if debug_flag:
        # Write each dataframe to a different worksheet.
        logger.info("Generating multisheet output file FinalVATable.xlsx.........")
        key_list = list(step_info.get_steps_output_dict().keys())
        value_list = list(step_info.get_steps_output_dict().values())
        Util.write_sheets_to_excel(os.path.join(output_dir, 'FinalVATable.xlsx'), value_list, key_list)


@Util.strict_types
def add_cxp_table_ra_from_ti_table(cxp_table: pd.DataFrame, ti_table: pd.DataFrame, supp_dir: str) -> pd.DataFrame:
    """
    Add to CXP table RA taken from Team Inventory table. PRM RA is not considered reliable to use

    Args:
        cxp_table: pd.DataFrame CXP table
        ti_table: ps.DataFrame TI table
        supp_dir: str, generated support file directory for storing debug files is any

    """
    cxp_df = pd.merge(cxp_table, ti_table[['Team', 'Requirement Area']], how='left',
                      left_on=cxp_table[CXP_TABLE__CXP_RESP_TEAM], right_on=['Team'])
    cxp_df.drop('Team', axis=1, inplace=True)
    cxp_df.to_excel(os.path.join(supp_dir, 'CXPTableWithRA.xlsx'))
    return cxp_df


@Util.strict_types
def processing_ti_table(team_inv_table: pd.DataFrame) -> pd.DataFrame:
    """
    Remove duplicated entry and log warning if duplicated lines or Team name are
    available on team inventory dataframe.
    Args:
        team_inv_table: the team inventory dataframe

    Returns:
        the team inventory dataframe

    """
    # Remove "teamEmail" column (not used) from the team inventory file
    team_inv_table.drop(columns='teamEmail', inplace=True)

    # Check number of duplicated lines on Team Inventory file
    ti_duplicated_lines = team_inv_table.duplicated().sum()
    if ti_duplicated_lines:
        logger.info("WARNING!!! Number of TI duplicated lines: %s", ti_duplicated_lines)
        df_ti_duplicated_lines = team_inv_table[team_inv_table.duplicated()]
        logger.info("\n%s\n", df_ti_duplicated_lines.to_string(index=False))

    # Remove duplicated line from team inventory file
    team_inv_table.drop_duplicates(inplace=True)

    # Check number of duplicated 'Team' name entries
    ti_duplicated_lines = team_inv_table.duplicated(['Team']).sum()
    if ti_duplicated_lines:
        logger.info("WARNING!!! Number of duplicated 'Team' entries on TI: %s", ti_duplicated_lines)
        df_ti_duplicated_lines = team_inv_table[team_inv_table.duplicated(['Team'])]
        logger.info("\nTeam\n%s\n", df_ti_duplicated_lines['Team'].to_string(index=False))

    return team_inv_table
