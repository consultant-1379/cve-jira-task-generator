"""
This module contains functions that allow an authorized user to download
the team and RA names related to Jira TOR Project Vulnerability issue type.
After the download the above information is saved to a Dataframe object.
"""

import os
from typing import Optional
import argparse
import json
import logging.config
import requests
import pandas as pd
from dotenv import load_dotenv
from dotenv import find_dotenv
from lib.utility_lib import (strict_types, get_data_from_yaml_file,
                             colour_text, MyColours)  # noqa: E402

# CONSTANTS
JIRA_URL = "https://eteamproject.internal.ericsson.com"

def configure_logger_for_main() -> None:
    """
    Configure logging when invoked as script
    """
    log_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)-8s [%(filename)s:%(lineno)-4s] %(message)s'
    )
    file_handler = logging.FileHandler(filename='get_jira_data.log', mode="w")
    file_handler.setFormatter(log_formatter)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)

    logging.basicConfig(encoding='utf-8',
                        level=logging.INFO,
                        handlers=[file_handler, console_handler])


# create logger
if __name__ == "__main__":
    configure_logger_for_main()
else:
    logging.config.dictConfig(
        get_data_from_yaml_file(
            os.path.join(os.path.dirname(__file__), '..', 'logging.yaml')))

logger = logging.getLogger()


@strict_types
def get_request(access_token: str, url: str,
                timeout: int) -> requests.Response:
    """
    Sends a GET request to the Jira server, enabling HTTPError
    exceptions in case of failure (response code != 200)

    Arguments
        basic_auth: The Jira authentication token
        url: The URL
        timeout: The request timeout

    Returns:
        the response object
    """

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": f"Bearer {access_token}"
    }

    response = requests.request("GET", url, headers=headers, timeout=timeout)
    response.raise_for_status()
    return response


@strict_types
def get_issue_type_vuln_id(response_json: dict) -> str:
    """
    Extracts Jira identifier for the Tor project Vulnerability issue type
    from the JSON response.

    Args:
        the JSON response dictionary

    Returns:
        the Jira Vulnerability identifier
    """
    issue_type_vulnerability_id = [
        issue_type_fields['id']
        for issue_type_fields in response_json['values']
        if issue_type_fields['name'] == 'Vulnerability'
    ][0]
    return issue_type_vulnerability_id


@strict_types
def get_team_names(response_json: dict) -> Optional[list]:
    """
    Extracts the list of RA names from the JSON response.

    Args:
        the JSON response dictionary

    Returns:
        a list of team names or None in case of error
    """
    TEAMS_FIELD_ID = 'customfield_19813'
    teams = []
    for issue_field in response_json['values']:
        if issue_field['fieldId'] == TEAMS_FIELD_ID:
            teams = issue_field['allowedValues']
    if not teams:
        logger.error(
            colour_text(
                MyColours.RED,
                f'Custom field "{TEAMS_FIELD_ID}" (expected to contain team names) not found in Jira.'
            ))
        return None
    team_names = []
    for team in teams:
        if ('value' in team) and (bool(team['disabled']) is False):
            team_names.append(team['value'])
    return team_names


@strict_types
def get_ra_names(response_json: dict) -> Optional[list]:
    """
    Extracts the list of RA names from the JSON response.

    Args:
        the JSON response dictionary

    Returns:
        a list of RA names or None in case of error
    """
    RA_FIELD_ID = 'customfield_18644'
    ras = []
    for issue_field in response_json['values']:
        if issue_field['fieldId'] == RA_FIELD_ID:
            ras = issue_field['allowedValues']
    if not ras:
        logger.error(
            colour_text(
                MyColours.RED,
                f'Custom field "{RA_FIELD_ID}" (expected to contain RA names) not found in Jira.'
            ))
        return None

    ra_names = []
    for ra in ras:
        if ('value' in ra) and (bool(ra['disabled']) is False):
            ra_names.append(ra['value'])
    return ra_names


@strict_types
def get_jira_teams_and_ras() -> Optional[pd.DataFrame]:
    """
    Gets the names of teams and RAs related to Jira TORF Vulnerability issue type and
    saves them to a Dataframe.

    Returns:
        a Dataframe containing the downloaded team and RA names, or None in case of error
    """

    if load_dotenv(find_dotenv('.env.csv_generator')) is True:
        logger.info('\nEnv variables loaded from .env.csv_generator file')

    jira_access_token = os.getenv('CSV_GENERATOR_JIRA_TOKEN')

    if jira_access_token is None:
        logger.error(
            colour_text(
                MyColours.RED,
                'No Jira Basic Authentication credentials have been provided, cannot proceed.'
            ))
        return None

    try:
        url = JIRA_URL + "/rest/api/2/issue/createmeta/TORF/issuetypes"
        response = get_request(jira_access_token, url, 30)

        torf_json = json.loads(response.text)
        issue_type_vulnerability_id = get_issue_type_vuln_id(torf_json)

        url = url + "/" + issue_type_vulnerability_id
        response = get_request(jira_access_token, url, 30)

        issue_fields_json = json.loads(response.text)
        team_names = get_team_names(issue_fields_json)
        ra_names = get_ra_names(issue_fields_json)

        if not (team_names and ra_names):
            return None

        df_teams = pd.DataFrame({'Team': team_names})
        df_ras = pd.DataFrame({'RA': ra_names})
        df_teams_and_ras = pd.concat([df_teams, df_ras], axis=1)

    except Exception as exc:
        logger.error(
            colour_text(
                MyColours.RED,
                'Exception caught while processing Jira information:\n'
                f'{exc}.'))
        return None
    return df_teams_and_ras


def main():
    """
    This function is invoked when launched as standalone script.
    It invokes the function which gets the team and RA names from Jira
    and saves them to a Dataframe.
    """
    parser = argparse.ArgumentParser(
        description="Gets the names of teams and RAs related "
        "to TORF Vulnerability issue type and saves them to a Dataframe.")

    parser.parse_args()

    df_teams_and_ras = get_jira_teams_and_ras()

    if df_teams_and_ras is None:
        logger.error(
            colour_text(MyColours.RED,
                        'Failure in getting Jira teams and RAs names.'))
    else:
        logger.info('Jira Team names and RAs retrieved')


if __name__ == "__main__":
    main()
