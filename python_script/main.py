"""
    Main script to generate enhanced VA report and data file used to open
     Jira ticket.
"""
import os
import sys
import logging.config
import subprocess
from datetime import datetime
from time import time

from get_team_inventory_data import get_team_inventory_as_dataframe
from get_jira_data import get_jira_teams_and_ras
from lib.utility_lib import colour_text, \
    create_working_dir_and_remove_tree_if_exists, \
    get_data_from_yaml_file, set_postfix_file_name, MyColours, \
    get_generate_jira_tickets, get_config_properties_value_from_key, \
    get_update_cxp_table_with_prm_data, get_timeout, strict_types, get_base_image, get_va_report
from shared_var_and_constant import enm_product_set

sys.path.insert(1, os.path.dirname(__file__) + "/../utility")
from check_prm_data import check_and_apply_prm_data

# Exit status
__STATUS_SUCCESS = 0
__STATUS_FAIL = 1

# Configuration file
OUTPUT_FOLDER = "./output_tables/"

start_time = time()
logging.config.dictConfig(get_data_from_yaml_file('logging.yaml'))
logger = logging.getLogger("Main")
script_path = os.path.abspath(os.path.dirname(__file__))
logger.info(script_path)
exec_timeout = get_timeout()
logger.info('maximum execution time before exiting = %s', exec_timeout)
ti_file_path = get_config_properties_value_from_key('team_inv_table')
jira_file_path = get_config_properties_value_from_key('jira_table')
current_date_time = datetime.today().strftime("%Y-%m-%d_%H_%M_%S")
postfix_file_name = set_postfix_file_name(enm_product_set, current_date_time)
output_file_name = 'cENM-va-report-for-jira_' + postfix_file_name + '.xlsx'
csv_for_jira_generator_input_file = os.path.join(OUTPUT_FOLDER, output_file_name)
pre_process_script = os.path.join(script_path, "input_table_pre_analysis.py")
va_report_enrich_script = os.path.join(script_path, "va_enrich_report_generator.py")
csv_for_jira_gen_script = os.path.join(script_path, "csv_for_jira_generator.py")
csv_for_jira_tickets_generated_filename = "cENM-cve-jira-csv_" + postfix_file_name + '.csv'
csv_for_jira_tickets_generated_file = \
    os.path.join(OUTPUT_FOLDER, csv_for_jira_tickets_generated_filename)
create_working_dir_and_remove_tree_if_exists("generated_support_tables")
generate_jira = get_generate_jira_tickets()


@strict_types
def input_tables_exists() -> bool:
    """ This function verify input tables (vulnerability scan report and base image report)
        exists and are valid filenames
    """
    logger.info(colour_text(MyColours.BLUE, 'Check vulnerability scan and base image reports ...'))
    base_image = get_base_image()
    va_report = get_va_report()
    result = True
    if base_image is not None and va_report is not None:
        if not os.path.exists(va_report):
            result = False
            logger.error(colour_text(MyColours.RED,
                                     f'vulnerability scan report file invalid or does not exists {va_report}'))
        if not os.path.exists(base_image):
            result = False
            logger.error(
                colour_text(MyColours.RED, f'base image file invalid or does not exists {base_image}'))
    else:
        result = False
        logger.error(
            'Impossible to get base_image and/or vulnerability scan report: invalid key or data type')
    return result

try:
    if not input_tables_exists():
        sys.exit(__STATUS_FAIL)

    if generate_jira:
        logger.info(colour_text(MyColours.BLUE, 'Getting JIRA generation CI script: ...'))
        #   Warning: the CI main script path can be absolute or relative.
        #            Take care, in case of relative path, the path is relative
        #            to cve-jira-task-generator directory from which execution
        #            is started
        jira_tickets_gen_script = os.path.join(
            os.path.join(os.path.dirname(script_path), "cve_auto_task_script"), "main.py")
        if not os.path.exists(jira_tickets_gen_script):
            logger.error(colour_text(MyColours.RED, f"CI script filename {jira_tickets_gen_script}"
                                                    f" not exists, impossible to generate JIRA tickets."
                                                    f" Stop execution ..."))
            sys.exit(__STATUS_FAIL)

    logger.info(colour_text(MyColours.BLUE, "Download TI table ........"))
    ti_df = get_team_inventory_as_dataframe()
    if ti_df is not None and not ti_df.empty:
        ti_df.to_csv(ti_file_path, index=False)
        logger.info(colour_text(MyColours.GREEN, "TI download operation ended"))
    else:
        logger.error(colour_text(MyColours.RED, "TI table is None or empty. Stop execution ..."))
        sys.exit(__STATUS_FAIL)

    logger.info(colour_text(MyColours.BLUE, "Download Jira table ........"))
    jira_df = get_jira_teams_and_ras()
    if jira_df is not None and not jira_df.empty:
        jira_df.to_csv(jira_file_path, index=False)
        logger.info(colour_text(MyColours.GREEN, "Jira download operation ended"))
    else:
        logger.error(colour_text(MyColours.RED, "Jira table is None or empty. Stop execution ..."))
        sys.exit(__STATUS_FAIL)

    if not check_and_apply_prm_data(get_update_cxp_table_with_prm_data()):
        logger.error(colour_text(MyColours.RED,
                                 "Something went wrong checking or updating CXP Table. Stop execution ..."))
        sys.exit(__STATUS_FAIL)

    logger.info(colour_text(MyColours.BLUE, f"Run pre-processing script: {pre_process_script} ........"))
    completed_process = subprocess.run([sys.executable, pre_process_script], check=True, timeout=exec_timeout)
    if completed_process.returncode == __STATUS_SUCCESS:
        logger.info(
            colour_text(MyColours.GREEN, "pre-processing script ended successfully"))
    else:
        logger.error(colour_text(MyColours.RED,
                                 f"pre-processing script ended with status: {completed_process.returncode}"))
        sys.exit(__STATUS_FAIL)

    logger.info(
        colour_text(MyColours.BLUE, f"Run va enriched report generator script: {va_report_enrich_script} ........"))
    completed_process = subprocess.run([sys.executable, va_report_enrich_script, current_date_time], check=True,
                                       timeout=exec_timeout)
    if completed_process.returncode == __STATUS_SUCCESS:
        logger.info(
            colour_text(MyColours.GREEN, "va enriched report generator script ended successfully"))
    else:
        logger.error(colour_text(MyColours.RED,
                                 f"va enriched report generator ended with status:{completed_process.returncode}"))
        sys.exit(__STATUS_FAIL)

    logger.info(colour_text(MyColours.BLUE, f"Run cve jira generator script: {csv_for_jira_gen_script} ........"))
    completed_process = subprocess.run(
        [sys.executable, csv_for_jira_gen_script, "-f", csv_for_jira_generator_input_file, "-d", current_date_time],
        check=True, timeout=exec_timeout)
    if completed_process.returncode == __STATUS_SUCCESS:
        logger.info(colour_text(MyColours.GREEN, "cve jira generator script ended successfully"))
    else:
        logger.error(
            colour_text(MyColours.RED, f"cve jira generator script with status: {completed_process.returncode}"))
        sys.exit(__STATUS_FAIL)

    if generate_jira:
        logger.info(colour_text(MyColours.BLUE,
                                f"Run jira tickets generator script: {jira_tickets_gen_script} ........"))
        completed_process = subprocess.run(
            [sys.executable, jira_tickets_gen_script, csv_for_jira_tickets_generated_file], check=True)
        if completed_process.returncode == __STATUS_SUCCESS:
            logger.info(colour_text(MyColours.GREEN, "jira tickets generator script ended successfully"))
        else:
            logger.error(colour_text(MyColours.RED,
                                     f"jira tickets generator script ended with status: "
                                     f"{completed_process.returncode}"))
            sys.exit(__STATUS_FAIL)
    else:
        logger.info(colour_text(MyColours.BLUE,
                                "Jira tickets generation execution skipped: ........"))


except FileNotFoundError as exc:
    logger.error(colour_text(MyColours.RED, f"Process failed because file could not be found.\n{exc}"))
    sys.exit(__STATUS_FAIL)
except subprocess.CalledProcessError as exc:
    logger.error(colour_text(MyColours.RED, "Process failed because did not return a successful return code. "
                                            f"Returned {exc.returncode}\n{exc}"))
    sys.exit(__STATUS_FAIL)
except subprocess.TimeoutExpired as exc:
    logger.error(colour_text(MyColours.RED, f"Process timed out.\n{exc}"))
    sys.exit(__STATUS_FAIL)

end_time = time()
execution_time = end_time - start_time
logger.info(colour_text(MyColours.YELLOW, f'Total execution time: {execution_time: .2f}s'))
