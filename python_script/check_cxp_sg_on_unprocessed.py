"""
This script check in the 'Unprocessed' file which 'CXP' and 'SG' are missing in
the CXP/SG db table file. The result is saved in a text file.
"""
import argparse
import logging.config
import os

import sys

import pandas as pd

from lib import utility_lib as Util
from step_definition.step_data import StepData
from step_impl.step_check_unprocessed_cxp_sg import StepCheckUnprocessedCxpSg

logging.config.dictConfig(Util.get_data_from_yaml_file('logging.yaml'))
logger = logging.getLogger(__name__)

def main():
    """
    This function is invoked when launched as standalone script.
    It reads from input the full name of the Unprocessed output report file,
    the CXP and SG db input table file to verify if the 'CXP' and the 'SG'
    entries present in the Unprocessed report file are unavailable on the
    db input files.

    The result is saved in a text file.
    """
    if sys.version_info.major < 3 or pd.__version__ < "2":
        logger.warning("""\
    WARNING! Script running with python version minor of 3 or pandas version
    minor of 2, it is not guaranteed to work properly.
    """)

    parser = argparse.ArgumentParser(
        description="This script check in the Unprocessed report file which "
                    "'CXP' and 'SG' are missing in the CXP/SG db table file."
                    "The result is saved in a text file.")
    parser.add_argument('-c',
                        '--cxp',
                        type=str,
                        required=True,
                        help="the full path of the CXP file")
    parser.add_argument('-s',
                        '--sg',
                        type=str,
                        required=True,
                        help="the full path of the SG file")
    parser.add_argument('-f',
                        '--file',
                        type=str,
                        required=True,
                        help="the full path of the VA unprocessed report file")
    parser.add_argument('-o',
                        '--output',
                        type=str,
                        required=True,
                        help="the full path of the output report file")

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    u_df = Util.get_df_from_spreadsheet_file(os.path.normpath(args.file))
    if u_df is None:
        logger.error("Impossible to load input file: '%s'", args.file)
        sys.exit(1)

    c_df = Util.get_df_from_spreadsheet_file(os.path.normpath(args.cxp))
    if c_df is None:
        logger.error("Impossible to load input file: '%s'", args.cxp)
        sys.exit(1)

    s_df = Util.get_df_from_spreadsheet_file(os.path.normpath(args.sg))
    if s_df is None:
        logger.error("Impossible to load input file: '%s'", args.sg)
        sys.exit(1)

    step_info = StepData(pd.DataFrame(), pd.DataFrame())
    step = StepCheckUnprocessedCxpSg(step_info, s_df, c_df, os.path.normpath(args.file))
    step.run_step()
    cxp_result, sg_result = step.get_execution_results()

    write_report_file(args.output, cxp_result, sg_result, )
    print(f"\nReport file '{args.output}' generated.\n")


def write_report_file(output_filename: str, cxp_result: str, sg_result: str):
    """
    Write report to text file
    Args:
        output_filename: output file name
        cxp_result: result of CXP check
        sg_result: result of SG check

    """
    with open(output_filename, 'w', encoding='UTF-8') as output_fd:
        output_fd.write(f"{cxp_result}\n")
        output_fd.write(f"\n{sg_result}\n")


if __name__ == '__main__':
    main()
