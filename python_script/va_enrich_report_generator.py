"""
    Generate, from a va scan vulnerability report an enhanced processed vulnerability .xlsx file,
    including additional information such as Team and RA for properly address vulnerabilities
"""
import logging.config
import os
import sys
from time import time

import pandas as pd

import lib.utility_lib as Util
from shared_var_and_constant import VA_REPORT_WRONG_CVE_VID, \
    enm_product_set, debug_va_repo_enriched

from get_jira_data import get_jira_teams_and_ras
from get_team_inventory_data import get_team_inventory_as_dataframe
from step_definition.step_data import StepData


from step_impl.step_save_unprocessed_data import StepSaveUnprocessedData
from step_impl.step_filter_by_severity import StepFilterBySeverity
from step_impl.step_add_cxp import StepAddCxp
from step_impl.step_remove_base_image_row import StepRemoveBaseImageRow
from step_impl.step_add_rpm_info_columns import StepAddRpmInfoColumns
from step_impl.step_add_team_ra_cna import StepAddTeamRaCna
from step_impl.step_swap_cve_with_vid import StepSwapCveWithVid
from step_impl.step_remove_duplicated import StepRemoveDuplicated
from step_impl.step_swap_cve_none_with_vid import StepSwapCveNoneWithVid
from step_impl.step_set_team_column_and_reorder import StepSetTeamColumnAndReorder
from step_impl.step_remove_unused_columns_and_reorder import StepRemoveUnusedColumnsAndReorder
from step_impl.step_remove_team_name_and_ra_not_available_on_jira import StepRemoveTeamNameAndRaNotAvailableOnJira
from step_impl.step_check_unprocessed_cxp_sg import StepCheckUnprocessedCxpSg
from step_impl.step_expand_row import StepExpandRow
from step_impl.step_merge_lines_on_tool import StepMergeLinesOnTool

from va_enrich_report_generator_utility import get_current_date_time, processing_ti_table, load_input_tables, \
    add_cxp_table_ra_from_ti_table, generate_additional_output_files


# -------------------------------------------------------------------------
#                     MAIN
# -------------------------------------------------------------------------


def main():
    """
    The script generate an Excel output file with additional information from a scan report to
    be used for automatically create Jira tickets and assign them to a responsible team.
    """

    start_time = time()

    # create logger
    logging.config.dictConfig(Util.get_data_from_yaml_file('logging.yaml'))
    logger = logging.getLogger("va_enrich_report_generator")

    # -------------------------------------
    # check pandas and python version
    # ------------------------------------
    logger.info("Script: %s", os.path.basename(__file__))
    logger.info("Used pandas version: %s", pd.__version__)
    logger.info("Used python version: %d.%d.%d", sys.version_info.major, sys.version_info.minor,
                sys.version_info.micro)
    Util.check_python_and_pandas_version(str(sys.version_info.major), "3", str(pd.__version__), "2")

    current_date_time = get_current_date_time()
    # ---------------------------------------------------------------------
    # Read severities to filter by , if provided , otherwise stop execution
    #  Valid values are: 'LOW', 'MEDIUM', 'HIGH, 'CRITICAL'
    # ---------------------------------------------------------------------
    severities = Util.get_severities()
    logger.info('Selected CVE severity filter is %s', severities)
    if severities is None:
        message = ("ERROR! Please enter a valid severity value in 'config_properties.yml'"
                   "for default_severities tag")
        logger.error(Util.colour_text(Util.MyColours.RED, message))
        sys.exit(1)
    elif not all(severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'] for severity in severities):
        logger.error(Util.colour_text(Util.MyColours.RED, f'ERROR! Unsupported severity values {severities}'))
        sys.exit(1)
    # -------------------------------------------------------------
    # read discarded rows in pre-processing to add to unprocessed
    # -------------------------------------------------------------
    pre_process_discarded_rows_df = Util.get_df_from_spreadsheet_file(
        os.path.join('./input_tables', VA_REPORT_WRONG_CVE_VID))
    # -------------------------------------
    # load table into dataframe struct
    # ------------------------------------
    sg_mapping_table, va_scan_table, base_image_table, cxp_table, team_inv_table, \
        jira_table_df = load_input_tables()
    if team_inv_table is None:
        #     script launched standalone : download team inventory
        team_inv_table = get_team_inventory_as_dataframe()

    team_inv_table = processing_ti_table(team_inv_table)

    if jira_table_df is None:
        #     script launched standalone : download Jira 'Team Name' and 'RA' df
        jira_table_df = get_jira_teams_and_ras()

    # -------------------------------------------------------
    # create a directory for generated support/warning tables
    # -------------------------------------------------------
    supp_table_dir = Util.create_working_dir_and_remove_tree_if_exists('generated_support_tables', False)
    # -------------------------------------------------------
    # create a directory for generated  output tables
    # -------------------------------------------------------
    output_table_dir = Util.create_working_dir_and_remove_tree_if_exists('output_tables')
    # ------------------------------------------------------
    # generate output filename and unprocessed cve filename
    # ------------------------------------------------------
    output_file_name = 'cENM-va-report-for-jira_' + Util.set_postfix_file_name(enm_product_set,
                                                                               current_date_time) + '.xlsx'
    unprocessed_file_name = 'UnprocessedVulnerabilities_' + Util.set_postfix_file_name(enm_product_set,
                                                                                       current_date_time) + '.xlsx'
    unprocessed_file_path = os.path.join(output_table_dir, unprocessed_file_name)

    logger.info("Output filename: %s", output_file_name)
    logger.info("Unprocessed CVE filename: %s", unprocessed_file_path)
    # ----------------------------------
    # VA scan sheet generation
    # ----------------------------------
    required_table_list = [sg_mapping_table, va_scan_table, base_image_table, cxp_table, team_inv_table,
                           pre_process_discarded_rows_df, jira_table_df]
    if all(table is not None for table in required_table_list):
        step_info = StepData(va_scan_table, base_image_table)
        cxp_df = add_cxp_table_ra_from_ti_table(cxp_table.copy(), team_inv_table.copy(), supp_table_dir)

        logger.debug(f"Original {Util.get_va_report_clean_file_name()} VA scan table: {va_scan_table.count}")
        logger.debug(f"Original {Util.get_base_image_clean_file_name()} base image table: {base_image_table.count}")
        ############################################################################################
        # Filter by severity
        ##################################################
        filter_by_severity = StepFilterBySeverity(step_info, pre_process_discarded_rows_df.copy(), severities)
        filter_by_severity.run_step()

        ############################################################################################
        # Address the following use cases:
        #       Package paths = Path1 | path2 e RPM package = RPM1 | RPM2
        #               (split in multiple rows)
        #       Rpm Package = RPM1 and Package Path = path1 | path2
        #               (split into two lines with same Rpm Package)
        #       Rpm Package = ERIC ERIC split to two or more lines
        #               (two or more different Rpms affected by the same vulnerability
        #               - for example two versions of the same RPM)
        #       Package paths = Path1 | path2 | path3 e RPM package = RPM1| RPM2 moved to
        #       unprocessed vulnerabilities
        # It is applied to VA report and base image to allow a proper removal of base image content
        # present in VA report too.
        ############################################################################################

        expand_rows = StepExpandRow(step_info)
        expand_rows.run_step()

        ############################################################################################
        # Add CXP manually detected to correspondent package path
        ############################################################################################

        add_cxp_manually_detected = StepAddCxp(step_info)
        add_cxp_manually_detected.run_step()

        ############################################################################################
        # Remove rows of base images
        ############################################################################################
        va_report_no_base_image_row = StepRemoveBaseImageRow(step_info, supp_table_dir)
        va_report_no_base_image_row.run_step()

        ############################################################################################
        # From Rpm Package extract rpm name, rpm ver and CXP column (format CXPxxxyyyy)
        ############################################################################################

        va_report_add_rpm_columns_df = StepAddRpmInfoColumns(step_info)
        va_report_add_rpm_columns_df.run_step()

        ############################################################################################
        # Add Team from PRM and RA and CNA
        # Add RA to CXP table
        ############################################################################################
        va_report_add_team_ra_cna_df = StepAddTeamRaCna(step_info, sg_mapping_table.copy(), cxp_df.copy(),
                                                        supp_table_dir)
        va_report_add_team_ra_cna_df.run_step()

        ############################################################################################
        # Swap VulnerabilityID row content with CVE_REF whenever CVE_REF is a list of multiple CVEs
        ############################################################################################
        va_report_single_cve_df = StepSwapCveWithVid(step_info)
        va_report_single_cve_df.run_step()

        ############################################################################################
        # Remove duplicates CVEs after swap
        ############################################################################################
        va_report_single_cve_df = StepRemoveDuplicated(step_info)
        va_report_single_cve_df.run_step()

        ############################################################################################
        # Remove from va_scan_severity_tab cve = none and replace with vid
        ############################################################################################
        va_report_cve_none_replaced_with_vid_df = StepSwapCveNoneWithVid(step_info)
        va_report_cve_none_replaced_with_vid_df.run_step()

        ############################################################################################
        # Build 'Team' column depending on availability of CXP or only SG.
        # Remove from va_scan_severity_tab information not required and re-oder columns
        # as expected
        ############################################################################################
        va_report_set_team_col_reorder_df = StepSetTeamColumnAndReorder(step_info)
        va_report_set_team_col_reorder_df.run_step()

        ############################################################################################
        # Remove from current va_report_enriched_tab information not required and re-oder columns
        # as expected
        ############################################################################################
        va_report_set_team_col_reorder_df = StepRemoveUnusedColumnsAndReorder(step_info)
        va_report_set_team_col_reorder_df.run_step()

        ############################################################################################
        # Check that the 'Team name' and 'RA' entries are available on Jira database
        ############################################################################################
        va_report_team_name_and_ra_not_in_jira_df = StepRemoveTeamNameAndRaNotAvailableOnJira(step_info, jira_table_df)
        va_report_team_name_and_ra_not_in_jira_df.run_step()

        ############################################################################################
        #  Generate the unprocessed data file
        ############################################################################################
        save_unprocessed_data_step = StepSaveUnprocessedData(step_info,
                                                             unprocessed_file_path,
                                                             sg_mapping_table)
        save_unprocessed_data_step.run_step()

        ############################################################################################
        # Check that the 'CXP' and/or 'SG' entries in the Unprocessed file are available in
        # CXP/SG db table file
        ############################################################################################
        unprocessed_cxp_sg_df = StepCheckUnprocessedCxpSg(step_info, sg_mapping_table, cxp_table, unprocessed_file_path)
        unprocessed_cxp_sg_df.run_step()

        ############################################################################################
        # Final step merge on tool (found in column) and clean Unnamed columns
        ############################################################################################
        step_merge_on_tool = StepMergeLinesOnTool(step_info)
        step_merge_on_tool.run_step()

        logger.info("Generating merge file %s.........", output_file_name)
        Util.write_sheet_to_excel(os.path.join(output_table_dir, output_file_name), step_info.get_curr_va_report_df)

        #  Optionally Generate a report for each execution step of the enriched VA report
        # for debug purposes,  enabling the proper debug flag in config_properties.yml file
        if debug_va_repo_enriched is not None and isinstance(debug_va_repo_enriched, bool):
            generate_additional_output_files(step_info, output_table_dir, debug_va_repo_enriched)

        end_time = time()
        execution_time = end_time - start_time
        logger.info(Util.colour_text(Util.MyColours.YELLOW, f'Execution time: {execution_time: .2f}s'))
    else:
        logger.error(Util.colour_text(
            Util.MyColours.RED, "something went wrong with input tables in "
                                f"{os.path.basename(sys.argv[0])} ....exiting"))
        sys.exit(1)


if __name__ == '__main__':
    main()
