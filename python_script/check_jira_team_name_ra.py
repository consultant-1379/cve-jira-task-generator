"""
    Check that 'Team Name'/'RA' on CXP and TI tables are also available on Jira
"""
import argparse
import sys
import pandas as pd
from lib.utility_lib import strict_types, get_df_from_spreadsheet_file, \
    write_sheets_to_excel
from get_team_inventory_data import get_team_inventory_as_dataframe
from get_jira_data import get_jira_teams_and_ras

CXP_TEAM_COLUMN_NAME = "CXP Resp.Team"
TI_TEAM_COLUMN_NAME = "Team"
JIRA_TEAM_COLUMN_NAME = "Team"
COMMON_TEAM_COLUMN_NAME = "Team"

SG_RA_COLUMN_NAME = "RA"
TI_RA_COLUMN_NAME = "Requirement Area"
JIRA_RA_COLUMN_NAME = "RA"
COMMON_RA_COLUMN_NAME = "RA"


@strict_types
def _retrieve_team_name_from_cxp(file_path: str) -> pd.DataFrame:
    """
    Retrieve the list of 'Team Name' from the CXP table
    :return: dataframe containing the list of 'Team Name' from the CXP table
    """
    cxp_df = get_df_from_spreadsheet_file(file_path)
    # Remove unnecessary columns from the dataframe
    cxp_df = cxp_df[[CXP_TEAM_COLUMN_NAME]].drop_duplicates()
    # Change column name
    return cxp_df.rename(
        columns={CXP_TEAM_COLUMN_NAME: COMMON_TEAM_COLUMN_NAME})


def retrieve_team_name_from_ti() -> pd.DataFrame:
    """
    Retrieve the list of 'Team Name' from the Team Inventory
    :return: dataframe containing the list of 'Team Name' from
     Team Inventory table
    """
    ti_df = get_team_inventory_as_dataframe()
    return ti_df[[TI_TEAM_COLUMN_NAME]].drop_duplicates()


def _retrieve_ra_from_ti() -> pd.DataFrame:
    """
    Retrieve the list of RA from the Team Inventory table
    :return: dataframe containing the list of RA from the Team Inventory
     table
    """
    ti_df = get_team_inventory_as_dataframe()
    ti_df = ti_df[[TI_RA_COLUMN_NAME]].drop_duplicates()
    return ti_df.rename(columns={TI_RA_COLUMN_NAME: COMMON_RA_COLUMN_NAME})


@strict_types
def retrieve_ra_from_sg(file_path: str) -> pd.DataFrame:
    """
    Retrieve the list of the RA from the SG table
    :return: dataframe containing the list of RA from the SG table
    """
    sg_df = get_df_from_spreadsheet_file(file_path)
    # Remove unnecessary columns from the dataframe
    return sg_df[[SG_RA_COLUMN_NAME]].drop_duplicates()


@strict_types
def retrieve_team_from_jira_df(df: pd.DataFrame) -> pd.DataFrame:
    """
    Retrieve the Team name list from the Jira dataframe.
    :return: dataframe containing the Team name list from Jira

    Args:
        df: Jira dataframe
    """
    return df[[JIRA_TEAM_COLUMN_NAME]].drop_duplicates()


@strict_types
def retrieve_ra_from_jira_df(df: pd.DataFrame) -> pd.DataFrame:
    """
    Retrieve the RA list from the Jira dataframe.
    :return: dataframe containing the RA list from Jira

    Args:
        df: Jira dataframe
    """
    return df[[JIRA_RA_COLUMN_NAME]].drop_duplicates()


@strict_types
def get_common_team_name(cxp_df: pd.DataFrame, ti_df: pd.DataFrame,
                         jira_df: pd.DataFrame) -> pd.DataFrame:
    """
    Returns the common Team name between the 3 dataframes
    Args:
        cxp_df: CXP dataframe
        ti_df: Team Inventory dataframe
        jira_df: Jira dataframe

    Returns:
        Dataframe containing common Team name between the dataframe
    """
    return cxp_df.merge(ti_df, how='inner').merge(jira_df, how='inner')


@strict_types
def get_common_ra(sg_df: pd.DataFrame, ti_df: pd.DataFrame,
                  jira_df: pd.DataFrame) -> pd.DataFrame:
    """
    Returns the common RA between the 3 dataframes
    Args:
        sg_df: SG dataframe
        ti_df: Team Inventory dataframe
        jira_df: Jira dataframe

    Returns:
        Dataframe containing common RA between the dataframe
    """
    return sg_df.merge(ti_df, how='inner').merge(jira_df, how='inner')


@strict_types
def get_missing_team_from_jira(df: pd.DataFrame, column_name: str,
                               jira_df: pd.DataFrame) -> pd.DataFrame:
    """
    Return the missing Team name from two dataframe
    Args:
        df: dataframe
        column_name: the name of the column
        jira_df: Jira dataframe

    Returns:
        Dataframe containing the missing Team name between the dataframe
    """
    result_df = df.merge(jira_df,
                         left_on=column_name,
                         right_on=COMMON_TEAM_COLUMN_NAME,
                         how='outer',
                         indicator=True).query('_merge=="left_only"')
    return result_df[column_name].reset_index(drop=True).to_frame()


@strict_types
def get_missing_ra_from_jira(df: pd.DataFrame, column_name: str,
                             jira_df: pd.DataFrame) -> pd.DataFrame:
    """
    Return the missing RA from two dataframe
    Args:
        df: dataframe
        column_name: the name of the column
        jira_df: Jira dataframe

    Returns:
        Dataframe containing the missing RA between the dataframe
    """
    result_df = df.merge(jira_df,
                         left_on=column_name,
                         right_on=COMMON_RA_COLUMN_NAME,
                         how='outer',
                         indicator=True).query('_merge=="left_only"')
    return result_df[column_name].reset_index(drop=True).to_frame()


@strict_types
def is_team_name_available_on_jira(team_name: str, j_df: pd.DataFrame) -> bool:
    """
    The method find the 'team name' on the Jira dataframe and return if is
     found or not.
    Args:
        team_name: the team name to search
        j_df: the Jira dataframe

    Returns:
        True if the team name is found on the Jira dataframe,
        False otherwise.
    """
    return is_column_value_available_on_jira(team_name,
                                             COMMON_TEAM_COLUMN_NAME,
                                             j_df)


@strict_types
def is_ra_available_on_jira(ra_name: str, j_df: pd.DataFrame) -> bool:
    """
    The method find the 'Requirement Area' on the Jira dataframe and return
     if is found or not.
    Args:
        ra_name: the RA name to search
        j_df: the Jira dataframe

    Returns:
        True if the RA name is found on the Jira dataframe,
        False otherwise.
    """
    return is_column_value_available_on_jira(ra_name,
                                             COMMON_RA_COLUMN_NAME,
                                             j_df)


@strict_types
def is_column_value_available_on_jira(value: str, column_name: str,
                                      jira_df: pd.DataFrame) -> bool:
    """
    The method search a value on Jira dataframe and return if is found or not.
    Args:
        value: the value to search
        column_name: name of the column
        jira_df: the Jira dataframe

    Returns:
        True if the value is found on the Jira dataframe
        False otherwise.
    """
    return value in (jira_df[column_name].unique())


@strict_types
def log_common_and_missing_team_name(common_tn_df: pd.DataFrame,
                                     missing_cxp_tn: pd.DataFrame,
                                     missing_ti_tn: pd.DataFrame):
    """
    Log common team name, the missing team name from the CXP and the Jira
     dataframe, and also from the TI and the Jira dataframe.
    Args:
        common_tn_df: dataframe containing common team name between Jira, CXP
         and TI dataframe
        missing_cxp_tn: dataframe containing the missing Team name between CXP
         and Jira
        missing_ti_tn: dataframe containing the missing Team name between TI
         and Jira
    """
    print(f"Common CXP/TI/Jira team name entries: {len(common_tn_df)}\n"
          f"{common_tn_df[COMMON_TEAM_COLUMN_NAME].values}\n")
    print(f"Missing CXP team name on Jira: {len(missing_cxp_tn)}"
          f"\n{missing_cxp_tn.values}\n")
    print(f"Missing TI team name on Jira: {len(missing_ti_tn)}\n"
          f"{missing_ti_tn.values}\n")


@strict_types
def log_common_and_missing_ra(common_ra_df: pd.DataFrame,
                              missing_sg_ra: pd.DataFrame,
                              missing_ti_ra: pd.DataFrame):
    """
    Log common RA, missing RA from: the SG and the Jira dataframe, and from the
     TI and Jira dataframe.
    Args:
        common_ra_df: dataframe containing common RA between Jira, SG and
         TI dataframe
        missing_sg_ra: dataframe containing the missing RA between SG and Jira
        missing_ti_ra: dataframe containing the missing RA between TI and Jira
    """
    print(f"Common SG/TI/Jira RA entries: {len(common_ra_df)}\n"
          f"{common_ra_df[COMMON_RA_COLUMN_NAME].values}\n")
    print(f"Missing SG RA on Jira: {len(missing_sg_ra)}\n"
          f"{missing_sg_ra.values}\n")
    print(f"Missing TI RA on Jira: {len(missing_ti_ra)}\n"
          f"{missing_ti_ra.values}\n")


#
# Main
#
@strict_types
def check_team_name_and_ra(cxp_file_path: str, sg_file_path: str,
                           output_file_name: str):
    """
    Check team name/RA between CXP/Team Inventory and Jira
    Args:
        cxp_file_path: the path of the CXP table file
        sg_file_path: the path of the SG table file
        output_file_name: the full name of the Excel output file
    """
    # Load data on dataframe
    cxp_tn_df = _retrieve_team_name_from_cxp(cxp_file_path)

    sg_ra_df = retrieve_ra_from_sg(sg_file_path)

    ti_tn_df = retrieve_team_name_from_ti()
    ti_ra_df = _retrieve_ra_from_ti()

    jira_df = get_jira_teams_and_ras()
    jira_tn_df = retrieve_team_from_jira_df(jira_df)
    jira_ra_df = retrieve_ra_from_jira_df(jira_df)

    # --------------------
    # Team name management
    # --------------------
    # Retrieve common team name from CXP, TI and Jira
    common_team_name_df = get_common_team_name(cxp_tn_df, ti_tn_df, jira_tn_df)
    common_team_name_df = common_team_name_df[[COMMON_TEAM_COLUMN_NAME]]

    # Retrieve missing CXP team name in Jira
    missing_cxp_team_name_on_jira_df = get_missing_team_from_jira(
        cxp_tn_df, COMMON_TEAM_COLUMN_NAME, jira_tn_df)

    # Retrieve missing TI team name in Jira
    missing_ti_team_name_on_jira_df = get_missing_team_from_jira(
        ti_tn_df, COMMON_TEAM_COLUMN_NAME, jira_tn_df)

    log_common_and_missing_team_name(common_team_name_df,
                                     missing_cxp_team_name_on_jira_df,
                                     missing_ti_team_name_on_jira_df)

    # -------------
    # RA management
    # -------------
    # Retrieve common RA from SG, TI and Jira
    common_ra_df = get_common_ra(sg_ra_df, ti_ra_df, jira_ra_df)
    common_ra_df = common_ra_df[[COMMON_RA_COLUMN_NAME]]

    # Retrieve missing SG RA in Jira
    missing_cxp_ra_on_jira_df = get_missing_ra_from_jira(
        sg_ra_df, COMMON_RA_COLUMN_NAME, jira_ra_df)

    # Retrieve missing TI RA in Jira
    missing_ti_ra_on_jira_df = get_missing_ra_from_jira(
        ti_ra_df, COMMON_RA_COLUMN_NAME, jira_ra_df)

    log_common_and_missing_ra(common_ra_df,
                              missing_cxp_ra_on_jira_df,
                              missing_ti_ra_on_jira_df)

    # Write dataframes to different sheet in a single Excel file
    write_sheets_to_excel(output_file_name, [
        common_team_name_df,
        missing_cxp_team_name_on_jira_df,
        missing_ti_team_name_on_jira_df,
        common_ra_df,
        missing_cxp_ra_on_jira_df,
        missing_ti_ra_on_jira_df,
    ], [
        "Common team name", "Missing CXP team name", "Missing TI team name",
        "Common RA", "Missing CXP RA", "Missing TI RA"])


def main():
    """
    This function is invoked when launched as standalone script.
    It reads from input the full name of the output file that will be generated,
    the Jira username and password, invokes the function which gets the list of
    the Team name and RA from Jira.
    And show the list of Team name/RA not present on Jira but available on the
    CXP table and in the Team Inventory database.
    The result is saved to an Excel file.
    """
    parser = argparse.ArgumentParser(
        description="Gets all Jira team name and RA and compare them "
        "to the: Team Inventory database and with the CXP table."
        "The result is saved to an Excel file.")
    parser.add_argument(
        '-c', '--cxp', type=str, required=True,
        help="the full path of the CXP table file")
    parser.add_argument(
        '-s', '--sg', type=str, required=True,
        help="the full path of the SG table file")
    parser.add_argument(
        '-o', '--out', type=str, required=True,
        help="The full name of the Excel file (.xlsx) "
        "that will store the processed ER fields.")

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    check_team_name_and_ra(args.cxp, args.sg, args.out)


if __name__ == "__main__":
    main()
