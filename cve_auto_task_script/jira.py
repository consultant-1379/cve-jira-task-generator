import os
import sys
import json
from typing import Optional
import requests
from requests.adapters import HTTPAdapter, Retry
from dotenv import load_dotenv, find_dotenv

# CONSTANTS
HTTP_RETRIES = Retry(total=5, backoff_factor=1, status_forcelist=[502, 503, 504])
HTTP_TIMEOUT = 30

JIRA_PROTOCOL_TYPE = "https://"
JIRA_BASE_URL = JIRA_PROTOCOL_TYPE + "eteamproject.internal.ericsson.com"
JIRA_REST_API_URL = JIRA_BASE_URL + "/rest/api/2"
JIRA_ISSUE_URL = JIRA_REST_API_URL + "/issue/"
JIRA_SEARCH_URL = JIRA_REST_API_URL + "/search?jql="

generate_jira_tickets_official = False

def get_token_name():
    if generate_jira_tickets_official:
        key = 'VULN_TICKETS_GEN_ADMIN_JIRA_TOKEN'
    else:
        key = 'VULN_TICKETS_GEN_PERSONAL_JIRA_TOKEN'
    print(key)
    return key

def get_token():
    if load_dotenv(find_dotenv('.env.jira_generator')) is True:
        print('\nEnv variables loaded from .env.jira_generator file')
    else:
        return None

    jira_generation_token  = os.getenv(get_token_name())
    return jira_generation_token

def get_headers():
    jira_basic_auth_token = get_token()
    if jira_basic_auth_token is None:
        raise SystemExit(1, '\nERROR: no Jira Basic Authentication credentials have been provided, '
              'cannot proceed.\n')

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": f"Bearer {jira_basic_auth_token}"
    }
    return headers


def get_data_from_filter(str_filter: str, form_values=""):
    """Getting data from JIRA API

    Args:
        str_filter (str): the filter string for the API
        form_values (str, optional): form values. Defaults to "".

    Raises:
        Exception: For when there is error with using API

    Returns:
        json: response data from JIRA API
    """
    session = requests.Session()
    session.mount(JIRA_PROTOCOL_TYPE, HTTPAdapter(max_retries=HTTP_RETRIES))
    try:
        if form_values == "":
            response = session.get(JIRA_SEARCH_URL + str_filter + "&maxResults=2", headers=get_headers(), timeout=HTTP_TIMEOUT)
        else:
            response = session.get(JIRA_SEARCH_URL + str_filter + "&maxResults=2" + form_values, headers=get_headers(), timeout=HTTP_TIMEOUT)
        return response.json()
    except Exception as exc:
        out("ERROR: Too many failed requests - when getting data from JIRA API..")
        raise Exception(exc)


def add_comment(key: str, comment: str, status: str):
    """Add a comment to the JIRA ticket.

    Args:
        key (str): the JIRA key
        comment (str): the comment to add to the JIRA ticket
        status (str): JIRA ticket status

    Raises:
        Exception: For when there is error with using API
    """
    out("Adding a comment..")
    if "--- PLEASE DON'T CHANGE TASK SUMMARY ---" in str(comment):
        comment = comment.split("--- PLEASE DON'T CHANGE TASK SUMMARY ---")[-1]
    if status != 'Closed':
        comment = "TASK SUMMARY:\n\n" + comment
    else:
        comment = "REOPENED TASK SUMMARY:\n\n" + comment
    new_data = '{"body": ' + str(json.dumps(comment)) + '}'
    print(new_data)

    session = requests.Session()
    session.mount(JIRA_PROTOCOL_TYPE, HTTPAdapter(max_retries=HTTP_RETRIES))
    response = ""
    try:
        response = session.post(JIRA_ISSUE_URL + key + "/comment",
                                data=new_data,
                                headers=get_headers(),
                                timeout=HTTP_TIMEOUT)
        response.raise_for_status()
    except Exception as exc:
        out("ERROR: Too many failed requests - when adding a comment..")
        raise Exception(exc)

    if str(response.status_code) == "201":
        out("201: Adding comment the JIRA ticket was Successful.")
    else:
        out("Status Code:" + str(response.status_code))


def reopen_issue(key: str):
    """Reopen the JIRA ticket.

    Args:
        key (str): the JIRA key

    Raises:
        Exception: For when there is error with using API
    """
    out("Setting Reopened Status..")
    transition_change = "{\"transition\": {\"id\": \"51\"}}"

    session = requests.Session()
    session.mount(JIRA_PROTOCOL_TYPE, HTTPAdapter(max_retries=HTTP_RETRIES))
    response = ""
    try:
        response = session.post(JIRA_ISSUE_URL + key + "/transitions",
                                data=transition_change,
                                headers=get_headers(),
                                timeout=HTTP_TIMEOUT)

        response.raise_for_status()
    except Exception as exc:
        out("ERROR: Too many failed requests - when reopening JIRA ticket..")
        raise Exception(exc)

    if str(response.status_code) == "400":
        out("400: This probably means the JIRA status to be used was unavailable for this issue. Check the log to be sure. ")
    elif str(response.status_code) == "204":
        out("204: Setting Reopened Status on the JIRA ticket was Successful.")
    else:
        out("Status Code:" + str(response.status_code))


def add_reopen_label(key: str):
    """Adding the JIRA reopen label.

    Args:
        key (str): the JIRA key
        label (str): the JIRA label

    Raises:
        Exception: For when there is issue with using API
    """
    out("Adding Reopened label..")
    label_change = "{\"update\": {\"labels\": [ {\"add\": \"CVE_ISSUE_AUTO_TASK_REOPENED\"} ] } }"

    session = requests.Session()
    session.mount(JIRA_PROTOCOL_TYPE, HTTPAdapter(max_retries=HTTP_RETRIES))
    response = ""
    try:
        response = session.put(JIRA_ISSUE_URL + key, data=label_change, headers=get_headers(), timeout=HTTP_TIMEOUT)
        response.raise_for_status()
        out("Status Code:" + str(response.status_code))
    except Exception as exc:
        out("ERROR: Too many failed requests - when adding reopen label..")
        raise Exception(exc)

    if str(response.status_code) == "400":
        out("400: This probably means the 'labels' field to be updated was unavailable for this issue. Check the log to be sure. ")
    elif str(response.status_code) == "204":
        out("204: Updated of 'labels' field was Successful.")
    else:
        out("Status Code:" + str(response.status_code))


def update_issue(key: str, field: str, data: str, use_id=False):
    """Updating the JIRA field

    Args:
        key (str): the JIRA key
        field (str): the JIRA field
        data (str): the new value of the field
        use_id (bool, optional): use the id. Defaults to False.

    Raises:
        Exception: For when there is issue with using API
    """
    out("Updating " + key + " " + field + " to " + data)

    new_data = ""
    if use_id:
        new_data = ("{\"fields\": {\"" + field + "\": {\"id\": \"" + str(data) + "\"}}}")
    else:
        new_data = ("{\"fields\": {\"" + field + "\":" + str(data) + "}}")

    jira_id = get_data_from_filter("key=" + key)['issues'][0]['id']

    session = requests.Session()
    session.mount(JIRA_PROTOCOL_TYPE, HTTPAdapter(max_retries=HTTP_RETRIES))
    response = ""
    try:
        response = session.put(JIRA_ISSUE_URL + str(jira_id), data=new_data, headers=get_headers(), timeout=HTTP_TIMEOUT)
        response.raise_for_status()
        out("Status Code:" + str(response.status_code))
    except Exception as exc:
        out("ERROR: Too many failed requests - when updating JIRA '" + field + "'..")
        raise Exception(exc)

    if str(response.status_code) == "400":
        out("400: This probably means the '" + field + "' field to be updated was unavailable for this issue. Check the log to be sure...")
    elif str(response.status_code) == "204":
        out("204: Updated the '" + field + "' field Successful.")
    else:
        out("Status Code:" + str(response.status_code))


def create_vulnerability(data):
    """Creating the JIRA Ticket

    Args:
        data (json): the new JIRA data

    Raises:
        Exception: For when there is issue with using API
    """
    indexes = {
        "issue_type": 0,
        "summary": 1,
        "priority": 2,
        "reporter": 3,
        "description": 4,
        "team_name": 5,
        "ra": 6,
        "components": 7,
        "acceptance_criteria": 8,
        "found_in_release": 9,
        "epic_link": 10,
        "Product Name": 11,
        "Product Number": 12,
        "Severity": 13,
        "Tool": 14,
        "Identifier": 15,
        "Vulnerability description": 16
    }

    ra_map = {
        "Assurance & Optimisation": "501700",
        "BNEW RAN": "504140",
        "Cloud Native": "509002",
        "D&S": "501967",
        "Network Services": "507533",
        "Security": "500832",
        "Transport": "504317",
        "VNF": "507203",
        "No RA": "503454",
        "None": "-1"
    }

    out("\tAttempting to create: " + data[indexes['summary']])

    field_data = {
        "fields": {
            "project": {
                "key": "TORF"
            },
            "issuetype": {
                "name": data[indexes['issue_type']]
            },
            "priority": {
                "name": data[indexes['priority']]
            },
            "summary": "" + data[indexes['summary']],
            "description": data[indexes['description']],
            "components": [{"id": "125096"}],
            "customfield_11911": data[indexes['epic_link']],
            "customfield_12818": data[indexes['acceptance_criteria']],
            "customfield_51099": [{"value": data[indexes['found_in_release']]}],
            "customfield_18644": {"id": ra_map[data[indexes['ra']].strip()]},
            "customfield_19813": [{"value": data[indexes['team_name']]}],
            "customfield_14019": data[indexes['Product Name']],
            "customfield_24755": data[indexes['Product Number']],
            "customfield_12651": {"value": data[indexes['Severity']]},
            "customfield_51221": data[indexes['Tool']],
            "customfield_51748": data[indexes['Identifier']],
            "customfield_51216": data[indexes['Vulnerability description']]
        }
    }

    for i in indexes:
        print(i)
        print(data[indexes[i]])

    print(json.dumps(field_data))
    session = requests.Session()
    session.mount(JIRA_PROTOCOL_TYPE, HTTPAdapter(max_retries=HTTP_RETRIES))
    try:
        response = session.post(JIRA_ISSUE_URL, data=json.dumps(field_data), headers=get_headers(), timeout=HTTP_TIMEOUT)
        response.raise_for_status()
        out("Status Code:" + str(response.status_code))
    except Exception as exc:
        out("ERROR: Too many failed requests - when creating JIRA..")
        raise Exception(exc)


def search_by_issue_type_component_and_summary(issue_type: str, component: str, summary: str) -> Optional[dict]:
    """Search a JIRA ticket with the issue type and summary.

    Args:
        issue_type (str): the JIRA issue type to search
        component (str): the JIRA component to search
        summary (str): the JIRA ticket summary to search

    Returns:
        Optional[dict]: the query response if is found, None if an error occurred
    """
    session = requests.Session()
    session.mount(JIRA_PROTOCOL_TYPE, HTTPAdapter(max_retries=HTTP_RETRIES))
    jira_search_full_url = (f'{JIRA_SEARCH_URL}issuetype={issue_type} AND component={component} '
                            f'AND summary~"\\"{summary}\\""')
    out("JIRA query URL:" + jira_search_full_url)
    try:
        response = session.get(jira_search_full_url,
                            headers=get_headers(),
                            timeout=HTTP_TIMEOUT)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as err:
        raise SystemExit('\nException caught while processing Jira information: \n'
                        f'{err}.\n')

    except ValueError as exc:  # includes simplejson.decoder.JSONDecodeError
        print('\nException caught while processing Jira information: \n'
            f'{exc}.\n')

    return None

def out(msg):
    sys.stdout.write(str(msg))
    sys.stdout.write("\n")
    sys.stdout.flush()
