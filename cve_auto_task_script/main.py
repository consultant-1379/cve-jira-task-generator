import sys
import os
import csv
import logger
import jira

# CONSTANTS
CF_VULNERABILITY_STATUS = "customfield_51753"
FILE_PATH = "./res/cENM-cve-jira-csv_example_for_tests.csv"


def __run__():
    logger.clear_log()

    out("Starting CVE Auto Task Generation Script...")
    #  if launched by CSV file generation scripts, take output from scripts, otherwise use constants FILE_PATH
    if len(sys.argv) > 1:
        csv_generator_output_file = sys.argv[1]
        jira.generate_jira_tickets_official = True
        out("Automatically generating JIRA tickets from: " +
            csv_generator_output_file)
    else:
        csv_generator_output_file = os.path.join(
            os.path.abspath(os.path.dirname(__file__)), FILE_PATH)

    extract_data(csv_generator_output_file)

    out("...Finished!!")


def extract_data(file_path):
    out("Attempting to read data from: " + file_path)
    file = open(file_path)

    reader = csv.reader(file)
    headers = []
    headers = next(reader)
    out(str(headers))

    indexes = {
        "issue_type": 0,
        "summary": 1,
        "priority": 2,
        "reporter": 3,
        "description": 4,
        "team_name": 5,
        "ra": 6,
        "components": 7,
        "acceptance_criteria": 8,
        "found_in_release": 9,
        "epic_link": 10,
        "Product Name": 11,
        "Product Number": 12,
        "Severity": 13,
        "Tool": 14,
        "Identifier": 15,
        "Vulnerability description": 16
    }

    data = []
    for row in reader:
        data.append(row)

    created_tasks = []
    existing_tasks = []

    for d in data:
        out(str(d[indexes['summary']]))

        issue_type = d[indexes['issue_type']]
        components = d[indexes['components']]
        summary = d[indexes['summary']]
        issue = jira.search_by_issue_type_component_and_summary(issue_type, components, summary)
        does_exist = False
        artifact = summary.split()[-1]

        for i in issue['issues']:
            found_issue_artifact = i['fields']['summary'].split()[-1]
            if artifact == found_issue_artifact:
                does_exist = True

                status = i['fields']['status']['name']
                key = i['key']

                if status != 'Closed':
                    out("Status Open:")
                    jira.add_comment(key, d[indexes['description']], status)
                else:
                    out("Status Closed:")
                    do_not_reopen_resolution = ['Invalid', 'Duplicate']
                    if str(i['fields']['resolution']) == 'None' or i['fields']['resolution']['name'] not in do_not_reopen_resolution:
                        jira.update_issue(
                            key, CF_VULNERABILITY_STATUS, "{\"value\":\"Untreated\"}")
                        jira.reopen_issue(key)
                        jira.add_reopen_label(key)
                        jira.add_comment(key, d[indexes['description']], status)
                    else:
                        if i['fields']['resolution']['name']:
                            out(str(i['fields']['resolution']['name']) + " Closed Task found, will not reopen.")
                        else:
                            out("Invalid Closed Task found, will not reopen")
                out("TASK ALREADY EXISTS WITH: " + summary)
                existing_tasks.append(summary)

        if does_exist is False:
            out("TASK DOES NOT EXIST... CREATING!")
            jira.create_vulnerability(d)
            created_tasks.append(summary)
        out("\n")

    out("The following tasks were created as they did not exist...")
    for t in created_tasks:
        out(t)
    out("\n")
    out("The following tasks were not created as they already exist...")
    for t in existing_tasks:
        out(t)


def out(msg):
    sys.stdout.write(str(msg))
    sys.stdout.write("\n")
    sys.stdout.flush()

    logger.log(str(msg) + "\n")


# Entry point
__run__()
