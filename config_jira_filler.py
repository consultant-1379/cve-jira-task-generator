#!/usr/bin/env python3
"""
This script injects Jenkins build parameters
into configuration file for Jira generation script
"""

import json
import logging
import argparse
import subprocess
import ast
from ruamel.yaml import YAML
yaml = YAML()
yaml.preserve_quotes = True
yaml.boolean_representation = ['False', 'True']

def run_shell_command(command):
    """
    Returns shell command output.

    Parameters:
       command (string): the shell command to be executed.

    Returns:
       data (list): the resulting dictionary.
    """

    with subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,
                          universal_newlines=True) as proc:
        result = proc.stdout.read()
    # Returns JSON object as a list of dictionaries
    data = json.loads(result)
    return data

# Create a logging object
logger = logging.getLogger(__name__)
logging.basicConfig(level = logging.INFO)

HEAD_TAG = 'csv_generator_properties'

def main(config_file, enm_product_set, jira_generation):
    """
    MAIN function, it executes the replacement of
    variables inside YAML configuration file.
    """
    # Initialize variables
    sprint_version = enm_product_set.rsplit('.', 1)[0]
    found_in_release = ''
    iso_version = ''

    # Input CSV files
    input_sg_csv = ('input_tables/'
        f'Vulnerability_Report_SG_{enm_product_set}.csv')
    input_base_csv = ('input_tables/'
        f'Vulnerability_Report_Base_Images_{enm_product_set}.csv')

    # Get Product Line reference - REST call
    get_pl = ('curl -s -n https://pdu-oss-tools1.seli.wh.rnd.internal.ericsson.com'
            '/enm_dbm/api/sprint')
    logger.info('Running REST call to fetch Product Line reference: %s', get_pl)
    res = run_shell_command(get_pl)
    logger.info('REST call output: %s', res)

    for item in res:
        if item['releaseLabel'] == sprint_version:
            found_in_release = item['productLine'].split(' ')[-1]
    if not found_in_release:
        logger.warning('Product Line reference not found for Sprint Version: %s',
                       sprint_version)

    # Get Product Set Version contents - REST call
    get_ps = ('curl -s -H "Accept: application/json" -k --url '
            '"https://ci-portal.seli.wh.rnd.internal.ericsson.com/'
            f'getProductSetVersionContents/?productSet=ENM&version={enm_product_set.split("-")[0]}'
            '&pretty=true"')
    logger.info('Running REST call to fetch Product Set content: %s', get_ps)
    res = run_shell_command(get_ps)
    logger.info('REST call output: %s', res)

    for artifact in res[0]['contents']:
        if artifact.get('artifactName') == 'ERICenm_CXP9027091':
            iso_version = artifact.get('version')
    if not iso_version:
        logger.warning('ISO version not found for Product set: %s', enm_product_set.split('-')[0])

    # Opening YAML file and returns YAML
    # object as a dictionary
    with open(config_file, encoding="utf-8") as file:
        config_dict = yaml.load(file)

    # Replace config values with env variables
    logger.info('Replace config values with env variables..')
    config_dict[HEAD_TAG]['va_report'] = input_sg_csv
    config_dict[HEAD_TAG]['base_image'] = input_base_csv
    config_dict[HEAD_TAG]['found_in_release'] = found_in_release
    config_dict[HEAD_TAG]['enm_product_set'] = enm_product_set
    config_dict[HEAD_TAG]['iso_version'] = iso_version
    config_dict[HEAD_TAG]['sprint_version'] = sprint_version
    config_dict[HEAD_TAG]['generate_jira_tickets'] = ast.literal_eval(jira_generation)

    with open(config_file, 'wb') as file:
        yaml.dump(config_dict, file)
    logger.info('Replacement completed successfully!')
    logger.info("The config values: %s", config_dict)

# main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
                        prog = 'python -u ./config_jira_filler.py',
                        description = '''
                        This script injects Jenkins build parameters
                        into configuration file for Jira generation script.''')
    parser.add_argument('config_file', type = str,
                        help = 'Input Config Filename') # input filename
    parser.add_argument('enm_product_set', type = str, help = 'ENM Product Set')
    parser.add_argument('--jira_generation', type = str,
                        default = 'False', help = 'Jira generation True/False')
    args = parser.parse_args()
    main(args.config_file, args.enm_product_set, args.jira_generation)
